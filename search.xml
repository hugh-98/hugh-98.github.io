<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux基础（一）</title>
      <link href="/2023/03/07/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/03/07/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文使用的是CentOS7.9，使用VMware安装虚拟机。</p><p>如何安装虚拟机可以在网上搜教程，就不再讲解了。</p><h2 id="Linux文件与目录结构">Linux文件与目录结构</h2><p>==Linux系统中一切皆是文件==</p><p>Linux目录结构如下，都是树形结构。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935513.png" alt=""></p><blockquote><p>有几个特性：</p><ul><li>文件名大小写敏感。如：MAIL，Mail，mail可以是同级目录下的不同文件</li><li>以<code>.</code>开头的文件为隐藏文件</li><li>路径的分割符为<code>/</code>。（与Windows下不同，Windows的分割符是<code>\</code>）</li><li>文件名最长255个字节</li><li>包括路径在内的文件名称最长4095字节</li></ul></blockquote><p><strong>目录作用说明：</strong></p><ul><li><code>/</code>：根目录</li><li><code>/bin</code>：是Binary的缩写，该目录存放着普通用户使用的命令</li><li><code>/sbin</code>：管理员使用的命令</li><li><code>/home</code>：存放普通用户的主目录。在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li><code>/root</code>：管理员的用户主目录</li><li><code>/lib</code>：系统开机所需要的最基本的动态链接共享库</li><li><code>/lost+found</code>：一般为空。当系统非法关机后，这里才存放一些文件</li><li><code>/etc</code>：所有的系统管理所需要的配置文件和子目录</li><li><code>/usr</code>：非常重要的系统文件。类似于windows下的program files目录</li><li><code>/boot</code>：这里存放的是启动Linux时使用的一些核心文件。</li><li><code>/proc</code>：这个目录是一个虚拟的目录，它是系统内存的映射。可以通过直接访问这个目录来获取系统信息。</li><li><code>/srv</code>：service缩写。该目录存放一些服务启动之后需要提取的数据</li><li><code>sys</code>：这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</li><li><code>/tmp</code>：用于存放一些临时文件</li><li><code>/dev</code>：是设备（device）的缩写。用于存放Linux的外部设备。把所有的硬件用文件的形式存储。</li><li><code>/media</code>（CentOS6）：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。CentOS7迁移到<code>/run/media</code></li><li><code>/mnt</code>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</li><li><code>/opt</code>：opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li><code>var</code>：var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li></ul><h2 id="vi-vim编辑器">vi/vim编辑器</h2><h3 id="基本概念">基本概念</h3><ul><li><p><code>vi</code>是Unix操作系统和类Unix操作系统中最通用的文本编辑器</p></li><li><p><code>vim</code>编辑器是从VI发展出来的一个性能更加强大的文本编辑器。可以主动的以字体颜色辨别语法的正确性，方便程序设计。<code>vim</code>与<code>vi</code>编辑器完全兼容</p></li></ul><p><code>vi</code>/<code>vim</code>常用的三种模式分别是：<strong>一般模式</strong>，<strong>编辑模式</strong>，<strong>命令模式</strong></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935514.png" alt=""></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935516.gif" alt=""></p><h3 id="一般模式（默认）">一般模式（默认）</h3><p>刚启动<code>vim</code>就会进入一般模式。此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。可以【删除】、【复制】、【粘贴】</p><p>其中常用语法如下：</p><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>yy</td><td>复制光标当前一行**（常用）**</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在（含）的向下 n 行，例如 20yy 则是复制 20 行**（常用）**</td></tr><tr><td>p, P</td><td>p为将已复制的数据在光标下一行贴上；P 则为贴在游标上一行；<strong>（常用）</strong></td></tr><tr><td>np</td><td>n 为数字。将复制的内容粘贴n次</td></tr><tr><td>u</td><td>撤销上一步</td></tr><tr><td>dd</td><td>剪切游标所在的那一整行**(常用)**</td></tr><tr><td>ndd</td><td>n 为数字。剪切光标（含）后n行</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>yw</td><td>复制当前光标所在的那个字符到单词结束的所有数据</td></tr><tr><td>dw</td><td>剪切当前光标所在的那个字符到单词结束的所有数据</td></tr><tr><td>$</td><td>将光标移动到当前行的行尾</td></tr><tr><td>^</td><td>将光标移动到当前行的行头</td></tr><tr><td>G</td><td>移动到最后一行</td></tr><tr><td>nG</td><td>移动到这个文件的第n行**(常用)**(可配合 :set nu)</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="编辑模式">编辑模式</h3><p>在一般模式下，按下【i, I, o, O, a, A】等任何一个字母，才会进入编辑模式</p><p>若要从编辑模式切换回一般模式，则按【Esc】按键即可</p><p>常用语法</p><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>i</td><td>当前光标前</td></tr><tr><td>a</td><td>当前光标后</td></tr><tr><td>o</td><td>当前光标行的下一行</td></tr><tr><td>I</td><td>当前光标所在行的行头</td></tr><tr><td>A</td><td>当前光标所在行的行尾</td></tr><tr><td>O</td><td>当前光标行的上一行</td></tr></tbody></table><blockquote><p>建议：</p><p>命令太多了，建议只使用一个【i】就够用了</p></blockquote><h3 id="指令模式">指令模式</h3><p>在一般模式中，输入【<code>:</code>，<code>/</code>，<code>?</code>】任何一个按钮，就可以将光标移动到最底下的那行，进入指令模式。</p><p>常用语法</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:!</td><td>强制执行</td></tr><tr><td>/要查找的词</td><td>n查找下一个，N往上查找</td></tr><tr><td>?要查找的词</td><td>往上查找</td></tr><tr><td>:noh</td><td>取消高亮显示</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>关闭行号</td></tr><tr><td>:%s/old/new/g</td><td>替换内容 /g 替换匹配到的所有内容</td></tr><tr><td>:%s/word1/word2/gc</td><td>寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：<br/>『:100,200s/vbird/VBIRD/g』。(常用)</td></tr></tbody></table><h2 id="网络配置">网络配置</h2><h3 id="查看网络IP和网关">查看网络IP和网关</h3><ol><li>查看IP地址</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935517.png" alt=""></p><ol start="2"><li>查看网关地址</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip route</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935518.png" alt=""></p><h3 id="配置网络IP地址">配置网络IP地址</h3><h4 id="修改IP地址成静态地址">修改IP地址成静态地址</h4><ol><li>查看IP配置文件</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935519.png" alt=""></p><ol start="2"><li>将其修改为静态IP地址</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935520.png" alt=""></p><p>上述修改的DNS2，应该为DNS1</p><h4 id="重启网络">重启网络</h4><p>在修改IP地址后，需要重启网络：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h4 id="修改IP地址后可能会遇到的问题">修改IP地址后可能会遇到的问题</h4><ul><li><p>物理机能ping通虚拟机，但是虚拟机ping不通物理机。一般都是因为物理机的防火墙问题，把防火墙关闭就行。</p></li><li><p>虚拟机能ping通物理机，但是虚拟机ping不通外网。一般都是DNS设置有问题</p></li><li><p>虚拟机ping <code>www.baidu.com</code> 显示域名未知等信息，一般查看GATEWAY和DNS设置是否正确</p></li><li><p>如果以上全部设置完还是不行，需要关闭<code>NetworkManager</code>服务</p></li></ul> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager # 关闭</span><br><span class="line">systemctl disable NetworkManager # 禁用</span><br></pre></td></tr></table></figure><ul><li>如果检查发现<code>systemctl status network</code> 有问题，需要检查 ifcfg-ens33</li></ul><h3 id="配置主机名">配置主机名</h3><h4 id="修改主机名称">修改主机名称</h4><ol><li>查看当前服务器的主机名称</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935521.png" alt=""></p><ol start="2"><li>如果感觉主机名不合适，可以修改。通过编辑<code>/etc/hostname</code>文件</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><ol start="3"><li>修改后，重启生效</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><ol start="4"><li>如果不想重启，则执行以下命令</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname [新主机名]</span><br></pre></td></tr></table></figure><h4 id="修改hosts映射文件">修改hosts映射文件</h4><p>1）修改<code>Linux</code>的主机映射文件（hosts文件）</p><p>（1）打开<code>/etc/hosts</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>（2）添加如下内容</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935522.png" alt=""></p><ol start="2"><li>重启设备</li></ol><h2 id="系统管理">系统管理</h2><h3 id="Linux中的进程和服务">Linux中的进程和服务</h3><ul><li><p>计算机中，一个正在执行的程序或命令，被叫做“进程”（process）</p></li><li><p>启动之后一直存在、常驻内存的进程，一般被称作“服务”（service）</p></li></ul><h3 id="service服务管理（centos6）">service服务管理（centos6）</h3><ol><li>对某个服务进行 启动/停止/重启/查看状态</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service 服务名 start|stop|restart|status</span><br></pre></td></tr></table></figure><ol start="2"><li>查看Linux所有服务的运行状态</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service --status-all</span><br></pre></td></tr></table></figure><ol start="3"><li>列出所有服务</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure><ol start="4"><li>查看所有服务</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/init.d</span><br><span class="line">ls -al</span><br></pre></td></tr></table></figure><h3 id="chkconfig-设置后台服务的自启配置（centos6）">chkconfig 设置后台服务的自启配置（centos6）</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig # 查看所有服务的自启配置</span><br><span class="line">chkconfig 服务名 off# 关掉指定服务的自动启动</span><br><span class="line">chkconfig 服务名 on# 开启指定服务的自动启动</span><br><span class="line">chkconfig 服务名 --list# 查看服务开机启动状态</span><br></pre></td></tr></table></figure><h3 id="systemctl-centos7的服务管理">systemctl (centos7的服务管理)</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start|stop|restart|status 服务名</span><br></pre></td></tr></table></figure><ol start="2"><li>查看服务的方法：</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/systemd/system</span><br><span class="line">ls -al</span><br></pre></td></tr></table></figure><h3 id="systemctl-设置后台服务的自启配置（centos7）">systemctl 设置后台服务的自启配置（centos7）</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files# 查看服务开机启动状态</span><br><span class="line">systemctl disable 服务名# 关掉指定服务的自启动</span><br><span class="line">systemctl enable 服务名# 开启指定服务的自启动</span><br></pre></td></tr></table></figure><h3 id="关机重启命令">关机重启命令</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync# 将数据由内存同步到硬盘中</span><br><span class="line">halt# 停机，关闭系统，但不断电</span><br><span class="line">poweroff# 关机，断电</span><br><span class="line">reboot# 重启，等同于 shutdown -r now</span><br><span class="line">shutdown</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客教程(三)图片存储</title>
      <link href="/2023/03/06/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-%E4%B8%89-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/"/>
      <url>/2023/03/06/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-%E4%B8%89-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在Hexo博客远程发布时，如何存储并显示文章中的图片是一个问题。本文使用GitHub+PicGo来存储并显示图片，并使用Typora来写博客。</p><h2 id="环境安装">环境安装</h2><h3 id="安装Git">安装Git</h3><p>安装Git后还需要绑定自己的GitHub账号，可参考<a href="https://hugh-98.github.io/2023/03/05/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E4%B8%80/">这篇博客</a></p><h3 id="安装PicGo">安装PicGo</h3><p>GitHub地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><p>安装较为简单，直接略过了</p><h3 id="安装Typora">安装Typora</h3><p><a href="https://typoraio.cn/">官网</a>现在的版本需要购买。也可以在网上找0.x的版本，免费。</p><h2 id="GitHub图床部署">GitHub图床部署</h2><h3 id="GitHub新建仓库">GitHub新建仓库</h3><p>在GitHub上新建一个仓库，自定义名字</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950057.png" alt="image-20230306193643724"></p><h3 id="GitHub创建token">GitHub创建token</h3><ol><li>在GitHub的setting中，找到<code>Developer settings</code>选项</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950058.png" alt="image-20230306193923052"></p><ol start="2"><li>创建一个新的token</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950059.png" alt="image-20230306194020418"></p><ol start="3"><li>创建时候的选项</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950060.png" alt="image-20230306194133670"></p><ol start="4"><li>生成后，复制该token</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950061.png" alt="image-20230306194246910"></p><h3 id="PicGo设置">PicGo设置</h3><ol><li>打开安装的PicGo软件</li><li>在图床设置中，按照要求填写仓库名、分支名、token等等，即可。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950062.png" alt="image-20230306194404448"></p><h3 id="Typora设置">Typora设置</h3><p>Typora推荐用来写博客，使用Markdown非常方便。</p><p>为了能够在Typora中使用PicGo上传图片到GitHub上，可以对Typora进行设置。</p><ol><li>主要在偏好设置中设置图像。并可以验证图片是否可以正常上传</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950063.png" alt="image-20230306194633693"></p><ol start="2"><li>在Typora中写博客时插入图片后，可以一键上传博客中所有图片</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950064.png" alt="image-20230306194836662"></p><h2 id="目前存在的问题">目前存在的问题</h2><p>目前，使用GitHub作为图床，由于在中国大陆访问GitHub比较艰难，因此会出现图片显示不了的问题，需要科学上网后才会显示图片。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客教程(二)Hexo主题推荐</title>
      <link href="/2023/03/06/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E4%BA%8C/"/>
      <url>/2023/03/06/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Hexo博客默认的页面感觉太单调了，为了更好地美化个人博客，我们可以自己选择喜欢的主题。</p><p>Hexo推荐的主题有很多，都可以在<a href="https://hexo.io/themes/">官方网站</a>上查看。</p><p>本文主要讲一下推荐的主题，以及目前本人正在使用的主题。</p><h2 id="推荐主题">推荐主题</h2><h3 id="Butterfly">Butterfly</h3><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608546.png" alt="image-20230306102321551"  /><p>官网：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>GitHub地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><h3 id="NexT">NexT</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608547.png" alt="image-20230306102721008"></p><p>官网：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a></p><p>GitHub地址：<a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></p><h3 id="Icarus">Icarus</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608548.png" alt="image-20230306103633570"></p><p>官网：<a href="https://ppoffice.github.io/hexo-theme-icarus/">https://ppoffice.github.io/hexo-theme-icarus/</a></p><p>GitHub地址：<a href="https://github.com/ppoffice/hexo-theme-icarus">https://github.com/ppoffice/hexo-theme-icarus</a></p><h3 id="Fluid">Fluid</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608549.png" alt="image-20230306104439103"></p><p>官网：<a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></p><p>GitHub地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><h3 id="Volantis">Volantis</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608550.png" alt="image-20230306104813452"></p><p>官网：<a href="https://volantis.js.org/">https://volantis.js.org/</a></p><p>GitHub地址：<a href="https://github.com/volantis-x/hexo-theme-volantis">https://github.com/volantis-x/hexo-theme-volantis</a></p><h3 id="Snippet">Snippet</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608551.png" alt="image-20230306105139544"></p><p>官网：<a href="https://www.91h5.cc/?rf=gh-demo">https://www.91h5.cc/?rf=gh-demo</a></p><p>GitHub地址：<a href="https://github.com/shenliyang/hexo-theme-snippet">https://github.com/shenliyang/hexo-theme-snippet</a></p><h2 id="本文使用的主题Butterfly介绍">本文使用的主题Butterfly介绍</h2><p>本博客使用主题：<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a></p><p>关于如何配置可以直接看官网即可，讲的非常详细了。</p><blockquote><p>注意：使用该主题后，以后若需改动配置，则只需要在<code>_config.butterfly.yml</code>进行配置，可以不用在<code> _config.yml</code>中配置。</p></blockquote><p>在butterfly中，本文已配置如下第三方的功能：</p><ul><li><a href="https://github.com/PaicHyperionDev/hexo-generator-search">本地搜索</a></li><li><a href="https://tongji.baidu.com/web/welcome/login">百度分析统计</a></li><li>KaTeX</li><li>字数统计</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客教程(一)搭建Hexo博客</title>
      <link href="/2023/03/05/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E4%B8%80/"/>
      <url>/2023/03/05/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>首先，本文目标是搭建一个完全免费的个人博客。</p><p>当然，免费也有一定的缺点，就是GitHub经常需要科学上网才能进入，不太方便。也有人用Gitee，没有科学上网的人也可以搜索网上的相关教程。</p><p><strong>本文主要使用框架：</strong></p><ul><li>Hexo</li><li>Github</li></ul><p>笔者使用的是Windows10系统，所以只讲该系统下的安装与使用。并且，本文在安装软件时直接使用科学上网下载安装，对于无法科学上网的人来说可能会存在一些问题，建议查看<a href="https://hexo.io/zh-cn/docs/index.html">Hexo官方文档</a></p><p>也可以参考这位<a href="https://www.bilibili.com/video/BV1Yb411a7ty">up主的视频</a></p><h2 id="环境安装">环境安装</h2><p>这一步其实也可以参考<a href="https://hexo.io/zh-cn/docs/index.html">Hexo官方文档</a></p><h3 id="安装Git">安装Git</h3><h4 id="去官网安装Git">去官网安装<a href="https://git-scm.com/download/win">Git</a></h4><p>一般现在都是64位的Windows系统，所以直接下载安装即可。（不会就搜教程）</p><h4 id="让Git与自己的GitHub账号绑定">让Git与自己的GitHub账号绑定</h4><ol><li>安装完成后即可在右击鼠标，打开Git Bash。或者在Windows的搜索框中搜索Git，即可看到</li></ol><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208949.png" alt="image-20230305204033056" style="zoom: 80%;" /><ol start="2"><li>设置用户名与邮箱</li></ol><p>在Git Bash中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>生成ssh密钥文件</li></ol><p>在Git Bash中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>输入上述命令后，会有几个需要确认的问题，直接三个回车键即可。</p><ol start="4"><li>找到生成的密钥文件</li></ol><p>可以在Git Bash中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh# 进入密钥文件所在文件夹</span><br><span class="line">cat id_rsa.pub# 打印出公钥，将打印出的内容全部复制</span><br></pre></td></tr></table></figure><ol start="5"><li>登录GitHub账号，在GitHub Setting中添加SSH Keys</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208951.png" alt="image-20230305205503008"></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208952.png" alt="image-20230305205606025"></p><ol start="6"><li>测试是否绑定账号成功</li></ol><p>在Git Bash中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现以下信息，即表示成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Hi xxx! You&#x27;ve successfully authenticated, xxx.</span><br></pre></td></tr></table></figure><h3 id="安装Node-js">安装Node.js</h3><p>Hexo基于Node.js，所以需要安装Node.js</p><p>在<a href="https://nodejs.org/zh-cn/download/">Node.js官网</a>上下载Node.js即可</p><p>下载并安装完成后，可以在命令行中输入以下命令检测是否安装成功：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果成功，则会显示Node.js的版本号</p><p>后面还需要使用npm，但是由于Node.js已经自带npm，所以不需要额外安装。可以使用以下命令检测电脑中是否有npm：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="安装Hexo">安装Hexo</h3><ol><li>在电脑中创建一个文件夹。Hexo框架以及以后发布的博客都存储在该文件夹中。</li><li>在该文件夹中，打开命令行，使用npm安装Hexo</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ol start="3"><li>初始化博客。同目录下，输入：</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><hr/><p>通过以上命令即可将Hexo安装在本地。</p><p>下面就可以使用Hexo了。</p><h2 id="Hexo本地使用">Hexo本地使用</h2><h3 id="常用命令">常用命令</h3><p><strong>注：以下命令均在Hexo的安装目录下执行</strong></p><h3 id="创建博客">创建博客</h3><p>输入以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;博客名&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ol><li><p>创建的博客在Hexo安装路径下的<code>./source/_posts/</code>文件夹下。</p><p>也可以自己手动在该路径下创建文章，但是手动创建的文章不会自动加前言。</p><p><strong>所以，还是推荐使用命令创建新的博客</strong></p></li><li><p>生成的博客名后面默认有<code>.md</code>的后缀，所以最好学会写markdown形式的博客。（推荐使用<code>Typora</code>书写）</p></li></ol></blockquote><h3 id="生成静态文件">生成静态文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="本地部署Hexo">本地部署Hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="本地部署流程">本地部署流程</h3><p>如果我们只是想将博客部署在本地电脑，则根据上述的命令，按照以下流程完成即可：</p><ol><li>创建博客</li><li>生成静态文件</li><li>本地部署Hexo</li></ol><p>部署后，最后在 <a href="http://localhost:4000">http://localhost:4000</a> 即可访问</p><h2 id="Hexo部署在GitHub">Hexo部署在GitHub</h2><p>如果要将Hexo部署在Github上，则还需接下来的操作。</p><h3 id="GitHub新建仓库">GitHub新建仓库</h3><ol><li>在GitHub上新建一个仓库</li></ol><p><strong>注意：这里仓库名一定要是<code>用户名.github.io</code></strong></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208953.png" alt="image-20230305213100961"></p><ol start="2"><li>创建成功后，将仓库的ssh链接复制下来</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208954.png" alt="image-20230305213618837"></p><h3 id="修改配置文件">修改配置文件</h3><p>Hexo的配置内容都在安装路径下的<code>_config.yml</code>文件</p><p>在配置文件中，找到<code>deploy</code>的相关内容，将<code>type</code>填入<code>git</code>，<code>repo</code>填入上述复制的ssh链接，<code>branch</code>填入仓库对应的分支名。（注：现在默认分支应该是main吧，最好看清楚自己仓库的分支）</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208955.png" alt="image-20230305213657883"></p><h3 id="远程部署">远程部署</h3><p>上述步骤都完成后，可以使用以下命令进行远程部署：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>在部署前，如果有改动，则需要先用以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>然后，再使用远程部署的命令</p></blockquote><p>以后每次写出新文章就需要远程部署一次。</p><blockquote><p>建议每次远程部署前，先在本地部署预览一下，查看是否有问题，没问题在发布到GitHub上。</p></blockquote><h2 id="出现过的问题">出现过的问题</h2><h3 id="ssh端口不管用">ssh端口不管用</h3><p>在远程部署的时候，我使用的是github仓库链接是ssh的，所以需要22端口。有一次部署我发现，出现以下错误。从中可以看出，是因为无法读取远程仓库导致的。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052226746.png" alt="image-20230305222433073"></p><p>排查问题的方法很简单，在Git Bash中使用以下命令，检测是否可以链接github</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>我当时就出现如下报错。所以可以肯定，是22端口无法使用导致的。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052226321.png" alt="image-20230305222554789"></p><p>究其原因，我发现是学校校园网将22端口屏蔽了，所以无法使用。只要换个网络即可。</p><h3 id="图片无法显示">图片无法显示</h3><p>目前依旧存在的问题：</p><p>由于我博客中主题的图片与文章中的图片都存在Github上，导致如果不使用科学上网，图片将无法显示。。。</p><p>难道这就是免费的缺点吗！呜呜呜呜</p><p>不知道怎么解决！！！求评论区大佬教教</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
