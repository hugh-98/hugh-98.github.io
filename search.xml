<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git入门</title>
      <link href="/2023/03/20/Git/"/>
      <url>/2023/03/20/Git/</url>
      
        <content type="html"><![CDATA[<p>参考尚硅谷视频：<a href="https://www.bilibili.com/video/BV1vy4y1s7k6">https://www.bilibili.com/video/BV1vy4y1s7k6</a></p><h2 id="Git-简介">Git 简介</h2><h3 id="Git-结构">Git 结构</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953474.png" alt="image-20220629191213874"></p><h3 id="Git-和代码托管中心">Git 和代码托管中心</h3><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为远程库</p><p>代码托管中心的任务：维护远程库</p><ul><li><p>局域网环境下</p><ul><li>GitLab 服务器</li></ul></li><li><p>外网环境下</p><ul><li>GitHub</li><li>码云</li></ul></li></ul><h3 id="本地库和远程库">本地库和远程库</h3><h4 id="团队内部协作">团队内部协作</h4><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953475.png" alt="image-20220415153111217"></p><h4 id="跨团队协作">跨团队协作</h4><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953476.png" alt="image-20220415153150737"></p><h2 id="Git-常用命令">Git 常用命令</h2><table><thead><tr><th style="text-align:left">命令名称</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">git config --global <a href="http://user.name">user.name</a> 用户名</td><td style="text-align:left">设置用户签名</td></tr><tr><td style="text-align:left">git config  --global user.email 邮箱</td><td style="text-align:left">设置用户签名</td></tr><tr><td style="text-align:left">git init</td><td style="text-align:left">初始化本地库</td></tr><tr><td style="text-align:left">git status</td><td style="text-align:left">查看本地库状态</td></tr><tr><td style="text-align:left">git add 文件名</td><td style="text-align:left">添加到暂存区</td></tr><tr><td style="text-align:left">git commit -m “日志信息” 文件名</td><td style="text-align:left">提交到本地库</td></tr><tr><td style="text-align:left">git reflog</td><td style="text-align:left">查看历史记录</td></tr><tr><td style="text-align:left">git reset --hard 版本号</td><td style="text-align:left">版本穿梭</td></tr></tbody></table><h3 id="设置用户签名">设置用户签名</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br><span class="line">git config --global user.email 用户名</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/git_test</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name hugh</span></span><br><span class="line"></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/git_test</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email hugh@github.com</span></span><br><span class="line"></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/git_test</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> ~/.gitconfig</span></span><br><span class="line">[user]</span><br><span class="line">        name = hugh</span><br><span class="line">        email = hugh@github.com</span><br></pre></td></tr></table></figure><p>说明：</p><p>​签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。<strong>Git首次安装必须设置一下用户签名，否则无法提交代码</strong>。</p><p><strong>注意：这里设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系</strong>。</p><h3 id="初始化本地库">初始化本地库</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><p>目前我在这个路径下，准备初始化<code>git-demo</code>作为本地库</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line">/d/Git-Space/git-demo</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init<span class="comment"># 执行 git init 命令</span></span></span><br><span class="line">Initialized empty Git repository in D:/Git-Space/git-demo/.git/</span><br><span class="line"></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ll -a</span></span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 1 H 197121 0 Apr 15 16:01 ./</span><br><span class="line">drwxr-xr-x 1 H 197121 0 Apr 15 15:59 ../</span><br><span class="line">drwxr-xr-x 1 H 197121 0 Apr 15 16:01 .git/# 可以看到这里生成了一个.git目录</span><br></pre></td></tr></table></figure><h3 id="查看本地库状态">查看本地库状态</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><h4 id="首次查看（工作区没有任何文件）">首次查看（工作区没有任何文件）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="新增文件">新增文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br></pre></td></tr></table></figure><h3 id="再次查看（检测到未追踪的文件）">再次查看（检测到未追踪的文件）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加暂存区">添加暂存区</h3><h4 id="将工作区的文件添加到暂存区">将工作区的文件添加到暂存区</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br></pre></td></tr></table></figure><h4 id="查看状态（检测到暂存区有新文件）">查看状态（检测到暂存区有新文件）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   hello.txt</span><br></pre></td></tr></table></figure><p>在上述也可以看到从暂存区中可以删除文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm --cached &lt;file&gt;...</span><br></pre></td></tr></table></figure><h3 id="提交本地库">提交本地库</h3><h4 id="将暂存区的文件提交到本地库">将暂存区的文件提交到本地库</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;日志信息&quot; 文件名</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;my first commit&quot;</span> hello.txt</span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">[master (root-commit) 0edf694] my first commit</span><br><span class="line"> 1 file changed, 6 insertions(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br></pre></td></tr></table></figure><p>上述信息可以看到版本号为<code>0edf694</code></p><h4 id="查看状态（没有文件需要提交）">查看状态（没有文件需要提交）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>利用<code>git reflog</code>命令还可以查看到历史记录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">0edf694 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): my first commit</span><br></pre></td></tr></table></figure><p>还可以利用<code>git log</code>查看详细提交记录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line">commit 0edf694313bbfe56763790f96914726913d7a793 (HEAD -&gt; master)</span><br><span class="line">Author: hugh &lt;hugh@github.com&gt;</span><br><span class="line">Date:   Fri Apr 15 16:18:49 2022 +0800</span><br><span class="line"></span><br><span class="line">    my first commit</span><br></pre></td></tr></table></figure><h3 id="修改文件（hello-txt）">修改文件（hello.txt）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br></pre></td></tr></table></figure><h4 id="查看状态（检测到工作区有文件被修改）">查看状态（检测到工作区有文件被修改）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><h4 id="将修改的文件再次添加到暂存区">将修改的文件再次添加到暂存区</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br></pre></td></tr></table></figure><h4 id="查看状态（工作区的修改添加到了暂存区）">查看状态（工作区的修改添加到了暂存区）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        modified:   hello.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="提交到本地库">提交到本地库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;second commit&quot;</span> hello.txt</span></span><br><span class="line">warning: LF will be replaced by CRLF in hello.txt.</span><br><span class="line">The file will have its original line endings in your working directory</span><br><span class="line">[master 79817c0] second commit</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><h3 id="历史版本">历史版本</h3><h4 id="查看历史版本">查看历史版本</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog # 查看版本信息</span><br><span class="line">git log# 查看版本详细信息</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">79817c0 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: second commit</span><br><span class="line">0edf694 HEAD@&#123;1&#125;: commit (initial): my first commit</span><br></pre></td></tr></table></figure><h4 id="版本穿梭">版本穿梭</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先查看当前的历史记录，可以看到当前是在 4bfa3d0 这个版本</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">4bfa3d0 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: my third commit</span><br><span class="line">79817c0 HEAD@&#123;1&#125;: commit: second commit</span><br><span class="line">0edf694 HEAD@&#123;2&#125;: commit (initial): my first commit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到 0edf694 版本，也就是第一次提交的版本</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard 0edf694</span></span><br><span class="line">HEAD is now at 0edf694 my first commit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换完毕后，再查看历史记录，当前成功切换到了 0edf694 版本</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line">0edf694 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 0edf694</span><br><span class="line">4bfa3d0 HEAD@&#123;1&#125;: commit: my third commit</span><br><span class="line">79817c0 HEAD@&#123;2&#125;: commit: second commit</span><br><span class="line">0edf694 (HEAD -&gt; master) HEAD@&#123;3&#125;: commit (initial): my first commit</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后查看文件hello.txt，发现文件内容已经发生变化</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br></pre></td></tr></table></figure><p>Git 切换版本，底层其实是移动的 HEAD 指针，具体原理如下图所示。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953477.png" alt="image-20220415165114362"></p><h2 id="Git-分支操作">Git 分支操作</h2><h3 id="什么是分支">什么是分支</h3><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时 候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953478.png" alt="image-20220415165338990"></p><h3 id="分支的好处">分支的好处</h3><p>同时并行推进多个功能开发，提高开发效率。</p><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败 的分支删除重新开始即可。</p><h3 id="分支的操作">分支的操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h4 id="查看分支">查看分支</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">* master 4bfa3d0 my third commit# * 代表当前所在的分区</span><br></pre></td></tr></table></figure><h4 id="创建分支">创建分支</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个分支 hot-fix</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch hot-fix</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看分支</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">  hot-fix 4bfa3d0 my third commit</span><br><span class="line">* master  4bfa3d0 my third commit</span><br></pre></td></tr></table></figure><h4 id="修改分支">修改分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 master 分支上做修改</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!3333333333</span><br><span class="line">hello git! hello world!4444</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加暂存区</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交本地库</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;my forth commit&quot;</span> hello.txt</span></span><br><span class="line">[master 5e67e51] my forth commit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">查看分支，可以发现 hot-fix 分支并未做出改变，而当前 master 分支已更新为最新一次提交的版本</span></span><br><span class="line"> H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">  hot-fix 4bfa3d0 my third commit</span><br><span class="line">* master  5e67e51 my forth commit</span><br></pre></td></tr></table></figure><h4 id="切换分支">切换分支</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout hot-fix</span></span><br><span class="line">Switched to branch &#x27;hot-fix&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换分支后，可以发现当前分支已由 master 改成 hot-fix</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 查看 hot-fix 分支上的文件内容，发现与master分支上的内容不同</span></span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!</span><br><span class="line">hello git! hello world!3333333333</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在hot-fix 分支上做修改</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world!3333333333</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加暂存区</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交本地库</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;hot-fix commit&quot;</span> hello.txt</span></span><br><span class="line">[hot-fix b1578cb] hot-fix commit</span><br><span class="line"> 1 file changed, 3 insertions(+), 3 deletions(-)</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">查看分支</span></span><br><span class="line"> H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br><span class="line">* hot-fix b1578cb hot-fix commit</span><br><span class="line">  master  5e67e51 my forth commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="合并分支">合并分支</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操 在master分支上合并hot-fix分支</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge hot-fix</span></span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">Merge made by the &#x27;ort&#x27; strategy.</span><br><span class="line"> hello.txt | 6 +++---</span><br><span class="line"> 1 file changed, 3 insertions(+), 3 deletions(-)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并完成后，查看文件状态</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world!3333333333</span><br><span class="line">hello git! hello world!4444</span><br></pre></td></tr></table></figure><h4 id="产生冲突">产生冲突</h4><p>什么时候会遇到冲突？</p><blockquote><p>冲突产生的原因：</p><p>合并分支时，<strong>两个分支在同一个文件的同一个位置有两套完全不同的修改</strong>。Git 无法替 我们决定使用哪一个。必须人为决定新代码内容。</p></blockquote><p>案例实操：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先查看下当前master分支上的hello.txt</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world!3333333333</span><br><span class="line">hello git! hello world!4444</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在查看 hot-fix 分支上的hello.txt</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world!3333333333</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换回 master 分支，修改hello.txt</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! master master</span><br><span class="line">hello git! hello world!3333333333</span><br><span class="line">hello git! hello world!4444</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加到暂存区，并提交到本地库</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line"></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;master test&quot;</span> hello.txt</span></span><br><span class="line">[master 276bd41] master test</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到hot-fix 并 修改hello.txt</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout hot-fix</span></span><br><span class="line">Switched to branch &#x27;hot-fix&#x27;</span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world!555555555</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加到暂存库并提交到本地库</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line"></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;hot-fix test&quot;</span> hello.txt</span></span><br><span class="line">[hot-fix 75486df] hot-fix test</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换回 master 分支</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (hot-fix)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 master 分支上合并 hot-fix 分支。（注意下面会报错！）</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge hot-fix</span></span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT (content): Merge conflict in hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line"></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master|MERGING)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 查看文件</span></span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master|MERGING)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">hello git! hello world! master master</span><br><span class="line">hello git! hello world!3333333333</span><br><span class="line">hello git! hello world!4444</span><br><span class="line">=======</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world!555555555</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span></span><br></pre></td></tr></table></figure><p>查看状态（检测到有文件有两处修改）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master|MERGING)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line">        both modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解决冲突">解决冲突</h4><ol><li>编辑有冲突的文件，删除特殊符号，决定要使用的内容</li></ol><p>特殊符号：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD </span><br><span class="line">当前分支的代码 </span><br><span class="line">======= </span><br><span class="line">合并过来的代码 </span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt; hot-fix</span></span><br></pre></td></tr></table></figure><p>手动合并代码，从而解决冲突：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开文件</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master|MERGING)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim hello.txt</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">hello git! hello world! master master</span><br><span class="line">hello git! hello world!3333333333</span><br><span class="line">hello git! hello world!4444</span><br><span class="line">=======</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world!555555555</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt; hot-fix</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改文件, 留下两个文件中想要的内容</span></span><br><span class="line">hello git! hello world!22222222222</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! hot-fix</span><br><span class="line">hello git! hello world! master master</span><br><span class="line">hello git! hello world!4444</span><br><span class="line">hello git! hello world!555555555</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加到暂存区</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master|MERGING)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add hello.txt</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行提交（注意：此时使用 git commit 命令时不能带文件名）</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master|MERGING)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;merge_hot-fix&quot;</span></span></span><br><span class="line">[master 35dfbd6] merge_hot-fix</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现后面的 (master|MERGING) 变为了 (master)</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br></pre></td></tr></table></figure><h2 id="Git-团队协作机制">Git 团队协作机制</h2><h3 id="团队内协作">团队内协作</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953479.png" alt="image-20220415193420004"></p><h3 id="跨团队协作-2">跨团队协作</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953480.png" alt="image-20220415193451917"></p><h2 id="GitHub-操作">GitHub 操作</h2><p>GitHub 网址：<a href="https://github.com/">https://github.com/</a></p><h3 id="本地git-绑定-github账号">本地git 绑定 github账号</h3><ol><li>在本地git中，输入命令</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#x27;账号&#x27;</span><br></pre></td></tr></table></figure><p>如：</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953481.png" alt="image-20220415201127429"></p><p>会生成如下密钥</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953482.png" alt="image-20220415201504020"></p><ol start="2"><li><p>按照路径找到对应的<code>id_rsa.pub</code>文件，复制里面的数据</p></li><li><p>在github中添加新的ssh密钥</p></li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953483.png" alt="image-20220415201652546"></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953484.png" alt="image-20220415201801995"></p><ol start="4"><li>测试是否绑定成功</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh -T git@github.com</span></span><br><span class="line">Hi hugh-98! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="创建远程仓库">创建远程仓库</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953485.png" alt="image-20220415194614585"></p><p>注：<strong>远程仓库名最好跟本地仓库名一致！</strong></p><p>我这里使用<code>git-demo</code>这个名好了</p><p>创建完成后，会有如下指引信息！</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953486.png" alt="image-20220415195055683"></p><p><a href="https://github.com/hugh-98/git-demo.git">https://github.com/hugh-98/git-demo.git</a></p><h3 id="远程仓库操作">远程仓库操作</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td></tr></tbody></table><h4 id="创建远程仓库别名">创建远程仓库别名</h4><p>创建远程仓库别名 是因为：远程仓库的地址太长了，记不住，所以要取一个别名</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v # 查看当前所有远程地址别名</span><br><span class="line">git remote add 别名 远程地址</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">起别名</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add git-demo https://github.com/hugh-98/git-demo.git</span></span><br><span class="line"></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">git-demo        https://github.com/hugh-98/git-demo.git (fetch)</span><br><span class="line">git-demo        https://github.com/hugh-98/git-demo.git (push)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="推送本地分支到远程仓库">推送本地分支到远程仓库</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push 别名 分支</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push git-demo master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果是在本地没有登录过github账号，则会出现这个，提示需要登录github</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953487.png" alt="image-20220415200438509"></p><p>这里可以先使用 本地git绑定 github 账号，然后再在这个界面登录一下<code>Sign in with your browser</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送本地分支到远程仓库</span></span><br><span class="line">H@DESKTOP-7CK6BAS MINGW64 /d/Git-Space/git-demo (master)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push git-demo master</span></span><br><span class="line">warning: ----------------- SECURITY WARNING ----------------</span><br><span class="line">warning: | TLS certificate verification has been disabled! |</span><br><span class="line">warning: ---------------------------------------------------</span><br><span class="line">warning: HTTPS connections may not be secure. See https://aka.ms/gcm/tlsverify for more information.</span><br><span class="line">warning: ----------------- SECURITY WARNING ----------------</span><br><span class="line">warning: | TLS certificate verification has been disabled! |</span><br><span class="line">warning: ---------------------------------------------------</span><br><span class="line">warning: HTTPS connections may not be secure. See https://aka.ms/gcm/tlsverify for more information.</span><br><span class="line">Enumerating objects: 27, done.</span><br><span class="line">Counting objects: 100% (27/27), done.</span><br><span class="line">Delta compression using up to 16 threads</span><br><span class="line">Compressing objects: 100% (18/18), done.</span><br><span class="line">Writing objects: 100% (27/27), 2.01 KiB | 2.01 MiB/s, done.</span><br><span class="line">Total 27 (delta 8), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (8/8), done.</span><br><span class="line">To https://github.com/hugh-98/git-demo.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>推送成功</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953488.png" alt="image-20220415202432055"></p><h4 id="克隆远程仓库到本地">克隆远程仓库到本地</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone 远程地址</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hugh-98/git-demo.git</span><br></pre></td></tr></table></figure><p>小结：clone 会做如下操作。1、拉取代码。2、初始化本地仓库。3、创建别名</p><h4 id="拉取远程库内容">拉取远程库内容</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull 远程库地址别名 远程分支名</span><br></pre></td></tr></table></figure><h4 id="邀请加入团队">邀请加入团队</h4><ol><li>选择邀请合作者</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953489.png" alt="image-20220417141018689"></p><ol start="2"><li>填入想要合作的人</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953490.png" alt="image-20220417142154294"></p><ol start="3"><li>复制地址并通过微信或者钉钉等方式发送给该用户</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953491.png" alt="image-20220417142314436"></p><ol start="4"><li>在 atguigulinghuchong 这个账号中的地址栏复制收到邀请的链接，点击接受邀请。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953492.png" alt="image-20220417142401917"></p><ol start="5"><li>成功之后可以在 atguigulinghuchong这个账号上看到 这个账号上看到 git-Test的</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953493.png" alt="image-20220417142440636"></p><h3 id="跨团队协作-3">跨团队协作</h3><ol><li>将远程仓库的地址复制发给邀请跨团队协作的人，比如东方不败。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953494.png" alt="image-20220417142622218"></p><ol start="2"><li>在东方不败的 GitHub 账号里的地址栏复制收到的链接，然后点击 Fork 将项目叉到自<br>己的本地仓库。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953495.png" alt="image-20220417142707597"></p><p>叉成功后可以看到当前仓库信息。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953496.png" alt="image-20220417142724437"></p><ol start="3"><li>东方不败就可以在线编辑叉取过来的文件。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953497.png" alt="image-20220417142753694"></p><ol start="4"><li>编辑完毕后，填写描述信息并点击左下角绿色按钮提交。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953498.png" alt="image-20220417142902597"></p><ol start="5"><li>接下来点击上方的 接下来点击上方的 Pull请求 ，并创建一个新的请求 。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953499.png" alt="image-20220417143536003"></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953500.png" alt="image-20220417143634886"></p><ol start="6"><li>回到岳岳 GitHub 账号可以看到有一个 Pull request 请求。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953501.png" alt="image-20220417143701473"></p><p>进入到聊天室，可以讨论代码相关内容。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953502.png" alt="image-20220417144247761"></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953503.png" alt="image-20220417144253535"></p><ol start="7"><li>如果代码没有问题，可以点击 Merge pull reque 合并代码。</li></ol><h2 id="IDEA-集成-Git">IDEA 集成 Git</h2><h3 id="配置-Git-忽略文件">配置 Git 忽略文件</h3><ol><li>IDEA 特定文件</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953504.png" alt="image-20220417145325508"></p><ol start="2"><li>Maven 工程的 target 目录</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953505.png" alt="image-20220417145347825"></p><p>问题 1:为什么要忽略他们？<br>答：与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽 IDE 工具之 间的差异。</p><p>问题 2：怎么忽略？<br>1）创建忽略规则文件 xxxx.ignore（前缀名随便起，建议是 git.ignore） 这个文件的存放位置原则上在哪里都可以，为了便于让~/.gitconfig 文件引用，建议也放在用<br>户家目录下</p><p>git.ignore 文件模板内容如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Compiled class file</span></span><br><span class="line">*.class</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Log file</span></span><br><span class="line">*.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BlueJ files</span></span><br><span class="line">*.ctxt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mobile Tools <span class="keyword">for</span> Java (J2ME)</span></span><br><span class="line">.mtj.tmp/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Package Files <span class="comment">#</span></span></span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line">hs_err_pid*</span><br><span class="line"></span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure><h3 id="定位-Git-程序">定位 Git 程序</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953506.png" alt="image-20220417154623248"></p><h3 id="初始化本地库-2">初始化本地库</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953507.png" alt="image-20220417155730650"></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953508.png" alt="image-20220417155829626"></p><h3 id="添加到暂存区">添加到暂存区</h3><p>右键点击项目 选择 Git -&gt; Add 将项目添加到暂存区</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953509.png" alt="image-20220417160044266"></p><h3 id="提交到本地库-2">提交到本地库</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953510.png" alt="image-20220417161255698"></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953511.png" alt="image-20220417161329736"></p><p>提交后，可以在 IDEA 最下面看到</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953512.png" alt="image-20220417161523434"></p><h3 id="切换版本">切换版本</h3><p>在 IDEA 的最下面可以查看版本信息</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953513.png" alt="image-20220417163738481"></p><p>右键可以选择要切换的版本</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953514.png" alt="image-20220417163831408"></p><p>切换后，如下所示。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953515.png" alt="image-20220417164015159"></p><h3 id="创建分支-2">创建分支</h3><ol><li>创建分支</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953516.png" alt="image-20220417165204359"></p><ol start="2"><li>填写分支名</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953517.png" alt="image-20220417165344143"></p><ol start="3"><li>切换回 master 分支</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953518.png" alt="image-20220417165709960"></p><h3 id="合并分支-2">合并分支</h3><h4 id="正常合并（无冲突）">正常合并（无冲突）</h4><ol><li>假设 master 分支中，只有如下内容</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953519.png" alt="image-20220417170144663"></p><ol start="2"><li>假设 hot-fix 分支中，只有如下内容</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953520.png" alt="image-20220417170216253"></p><ol start="3"><li>将 hot-fix 分支 合并到 master。<ol><li>先切换到 master 分支</li><li>找到 hot-fix ，点击右键，找到 Merge Selected into Current</li></ol></li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953521.png" alt="image-20220417170409567"></p><ol start="4"><li>合并成功</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953522.png" alt="image-20220417170529502"></p><h4 id="非正常合并（存在冲突）">非正常合并（存在冲突）</h4><ol><li>假设 master 分支上的内容如下，</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953523.png" alt="image-20220417170914439"></p><ol start="2"><li>假设 hot-fix 分支上的内容如下</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953524.png" alt="image-20220417170812934"></p><ol start="3"><li>可以看到目前各个已提交节点的状态</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953525.png" alt="image-20220417171101134"></p><ol start="4"><li>尝试将 hot-fix 分支 合并到 master 分支上。会发现合并时会出现以下提示框。点击 <code>Merge</code> ，可以手动选择合并 冲突的代码。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953526.png" alt="image-20220417171228840"></p><ol start="5"><li>上述 点击 <code>Merge</code> 按钮后，会出现以下界面</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953527.png" alt="image-20220417171802896"></p><ol start="6"><li>假设，我保留 hot-fix 这行代码，去除 master 的那行代码，弄好后，点击 <code>Apply</code>按钮，则会自动合并两个分支。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953528.png" alt="image-20220417171958510"></p><h2 id="IDEA-集成-GitHub">IDEA 集成 GitHub</h2><h3 id="设置-GitHub-账号">设置 GitHub 账号</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953529.png" alt="image-20220417191332198"></p><h3 id="分享工程到-GitHub">分享工程到 GitHub</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953530.png" alt="image-20220417191717446"></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953531.png" alt="image-20220417191812431"></p><h3 id="push-pull">push &amp; pull</h3><p>右键点击项目，可以将当前分支的内容 push 到 GitHub 的远程仓库中，也可以把最新的远程库代码pull到本地库。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953532.png" alt="image-20220417193538177"></p><h3 id="clone-克隆远程库到本地">clone 克隆远程库到本地</h3><ol><li>打开IDEA，点击 <code>Gt from CVS</code></li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953533.png" alt="image-20220417201059181"></p><ol start="2"><li></li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201953534.png" alt="image-20220417201353827"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程</title>
      <link href="/2023/03/15/Shell%E7%BC%96%E7%A8%8B/"/>
      <url>/2023/03/15/Shell%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Shell-概述">Shell 概述</h2><p>Shell是一个命令行解释器，它接收应用程序/用户命令，然后调用操作系统内核。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201657000.png" alt="image-20230315205036877"></p><ol><li>Linux提供的Shell解释器有：</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# cat /etc/shells</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br></pre></td></tr></table></figure><ol start="2"><li>bash和sh的关系</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201657002.png" alt="image-20230315205526110"></p><ol start="3"><li>centos默认的解析器是 bash</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# echo $SHELL</span><br><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><h2 id="Shell-脚本入门">Shell 脚本入门</h2><ol><li>脚本格式</li></ol><p>脚本需要以<code>#!/bin/bash</code>开头（指定解析器的意思）</p><ol start="2"><li>制作第一个Shell脚本：<a href="http://helloworld.sh">helloworld.sh</a></li></ol><ul><li>需求：创建一个Shell脚本，输出helloworld</li><li>案例</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# touch helloworld.sh</span><br><span class="line">[root@centos_01 ~]# vim helloworld.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;helloworld&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>脚本的常用的执行方式：</li></ul><p>1）采用bash或sh+脚本的相对路径或绝对路径（可以不用赋予脚本+x权限）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# bash helloworld.sh</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure><p>2）采用输入脚本的绝对路径或相对路径执行脚本（<strong>必须具有可执行权限+x</strong>）</p><p>一、首先要赋予<code>helloworld.sh</code>脚本的+x权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x helloworld.sh</span><br></pre></td></tr></table></figure><p>二、执行脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相对路径</span></span><br><span class="line">[root@centos_01 scripts]# ./helloworld.sh</span><br><span class="line">helloworld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">绝对路径</span></span><br><span class="line">[root@centos_01 scripts]# /root/scripts/helloworld.sh</span><br><span class="line">helloworld</span><br></pre></td></tr></table></figure><h2 id="变量">变量</h2><h3 id="系统预定义变量">系统预定义变量</h3><ol><li><p>常用系统变量</p><p><code>$HOME</code>、<code>$PWD</code>、<code>$SHELL</code>、<code>$USER</code>等</p></li><li><p>案例实操</p></li></ol><ul><li>查看系统变量的值</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# echo $HOME</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><ul><li>显示当前Shell中所有变量：set</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# set</span><br><span class="line">BASH=/bin/bash</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><h3 id="自定义变量">自定义变量</h3><ol><li>基本语法</li></ol><ul><li><p>定义变量：变量名=变量值。（注意：<code>=</code>号前后不能有空格）</p></li><li><p>撤销变量：unset 变量名</p></li><li><p>声明静态变量：readonly 变量。（注意：不能unset）</p></li></ul><ol start="2"><li>变量定义规则</li></ol><ul><li><p>变量名称可以由字母、数字和下划线组成，但是不能以数字开头。<strong>环境变量名建议大写</strong></p></li><li><p>等号两侧不能有空格</p></li><li><p>在<code>bash</code>中，变量默认类型都是字符串类型，无法直接进行数值运算</p></li><li><p>变量的值如果有空格，需要使用双引号或单引号括起来</p></li></ul><ol start="3"><li>例子</li></ol><ul><li>定义变量A</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# A=5</span><br><span class="line">[root@centos_01 scripts]# echo $A</span><br><span class="line">5</span><br></pre></td></tr></table></figure><ul><li>给变量A重新赋值</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# A=8</span><br><span class="line">[root@centos_01 scripts]# echo $A</span><br><span class="line">8</span><br></pre></td></tr></table></figure><ul><li>撤销变量A</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# unset A</span><br><span class="line">[root@centos_01 scripts]# echo $A</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>声明静态的变量B=2，不能unset</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# readonly B=2</span><br><span class="line">[root@centos_01 scripts]# echo $B</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">[root@centos_01 scripts]# B=9</span><br><span class="line">-bash: B: readonly variable</span><br><span class="line"></span><br><span class="line">[root@centos_01 scripts]# unset $B</span><br><span class="line">-bash: unset: `2&#x27;: not a valid identifier</span><br></pre></td></tr></table></figure><ul><li>在bash中，变量默认类型都是字符串类型，无法直接进行数值运算</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# C=1+2</span><br><span class="line">[root@centos_01 scripts]# echo $C</span><br><span class="line">1+2</span><br></pre></td></tr></table></figure><ul><li>变量的值如果有空格，需要使用双引号或单引号括起来</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# D=Hello World</span><br><span class="line">-bash: World: command not found</span><br><span class="line"></span><br><span class="line">[root@centos_01 scripts]# D=&quot;Hello World&quot;</span><br><span class="line">[root@centos_01 scripts]# echo $D</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><ul><li>可把变量提升为全局环境变量，可供其他Shell程序使用</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# export D</span><br><span class="line">[root@centos_01 scripts]# vim helloworld.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;helloworld&quot;</span><br><span class="line">echo $D</span><br><span class="line">[root@centos_01 scripts]# bash helloworld.sh</span><br><span class="line">helloworld</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><h3 id="特殊变量">特殊变量</h3><h4 id="n"><code>$n</code></h4><ol><li>基本语法</li></ol><p><code>$n</code>：n为数字，<code>$0</code>代表该脚本名称，<code>$1</code>-<code>$9</code>代表第一到第九个参数，十以上的参数需要使用大括号包含，如<code>$&#123;10&#125;</code></p><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# touch parameter.sh</span><br><span class="line">[root@centos_01 scripts]# vim parameter.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &#x27;=======================$n==============&#x27;</span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line"></span><br><span class="line">[root@centos_01 scripts]# chmod 777 parameter.sh</span><br><span class="line">[root@centos_01 scripts]# ./parameter.sh cls xz</span><br><span class="line">=======================$n==============</span><br><span class="line">./parameter.sh</span><br><span class="line">cls</span><br><span class="line">xz</span><br></pre></td></tr></table></figure><h4 id=""><code>$#</code></h4><ol><li>基本语法</li></ol><p><code>$#</code>：获取所有输入参数个数，常用于循环，判断参数的个数是否正确以及加强脚本的健壮性</p><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# vim parameter.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &#x27;=======================$n==============&#x27;</span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">echo &#x27;=======================$#==============&#x27;</span><br><span class="line">echo $#</span><br><span class="line">[root@centos_01 scripts]# ./parameter.sh cls xz</span><br><span class="line">=======================$n==============</span><br><span class="line">./parameter.sh</span><br><span class="line">cls</span><br><span class="line">xz</span><br><span class="line">=======================$#==============</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="、"><code>$*</code>、<code>$@</code></h4><ol><li>基本语法</li></ol><ul><li><code>$*</code>：这个变量代表命令行中所有的参数，<code>$*</code>把所有的参数看成一个整体</li><li><code>$@</code>：这个变量也代表命令行中所有的参数，不过 <code>$@</code>把每个参数区别对待</li></ul><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# vim parameter.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &#x27;=======================$n==============&#x27;</span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">echo &#x27;=======================$#==============&#x27;</span><br><span class="line">echo $#</span><br><span class="line">echo &#x27;=======================$*=============&#x27;</span><br><span class="line">echo $*</span><br><span class="line">echo &#x27;======================$@=============&#x27;</span><br><span class="line">echo $@</span><br><span class="line">[root@centos_01 scripts]# ./parameter.sh a b c d e f g</span><br><span class="line">=======================$n==============</span><br><span class="line">./parameter.sh</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">=======================$#==============</span><br><span class="line">7</span><br><span class="line">=======================$*=============</span><br><span class="line">a b c d e f g</span><br><span class="line">======================$@=============</span><br><span class="line">a b c d e f g</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="-2"><code>$?</code></h4><ol><li>基本语法</li></ol><p><code>$?</code>：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。</p><blockquote><p>Shell 中 0 表示真，非0表示假</p></blockquote><ol start="2"><li>案例实操</li></ol><p>判断helloworld.sh脚本是否正确执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# ./helloword.sh</span><br><span class="line">hello world</span><br><span class="line">[root@centos_01 scripts]# echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="单引号与双引号的区别">单引号与双引号的区别</h3><p>定义字符串变量有三种方式，分别是双引号、单引号与无引号。如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# str1=&quot;testString&quot;# 双引号 定义变量</span><br><span class="line">[root@centos_01 scripts]# str2=&#x27;testString&#x27;# 单引号 定义变量</span><br><span class="line">[root@centos_01 scripts]# str3=testString# 无引号 定义变量</span><br><span class="line"></span><br><span class="line">[root@centos_01 scripts]# set | grep str   # 从中可以看到目前定义的都是一样的</span><br><span class="line">str1=testString</span><br><span class="line">str2=testString</span><br><span class="line">str3=testString</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="单引号">单引号</h4><p>单引号定义字符串所见即所得，即将单引号内的内容原样输出，或者描述为单引号里面看到的是什么就会输出什么。单引号是全引用，被单引号括起的内容不管是常量还是变量都不会发生替换。</p><blockquote><p>简单来说：在单引号中的内容 就是一个字符串</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# echo &#x27;$str1&#x27;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">str1</span></span><br></pre></td></tr></table></figure><h4 id="双引号">双引号</h4><p>双引号引用的内容，所见非所得。<strong>如果内容中有命令、变量等，会先把变量、命令解析出结果，然后在输出最终内容</strong>。双引号是部分引用，被双引号括起的内容常量还是常量，变量则会发生替换，替换成变量内容。</p><blockquote><p>简单来说：在双引号中的内容，如果含有一些变量等信息，则会替换成变量内容，然后再输出</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# echo &quot;$str1&quot;</span><br><span class="line">testString</span><br></pre></td></tr></table></figure><h4 id="无引号">无引号</h4><p>不使用引号定义字符串时，字符串不能包含空白字符（如Space或Tab），需要该加引号，一般连续的字符串，数字，路径等可以不加引号。如果内容中有命令、变量等，会先把变量、命令解析出结果，然后在输出最终内容。</p><blockquote><p>简单来说：在无引号中的内容，不能包含空白字符。若内容中有变量等信息，也可以替换成变量内容，然后再输出。</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# echo $str1</span><br><span class="line">testString</span><br></pre></td></tr></table></figure><h2 id="运算符">运算符</h2><ol><li>基本语法</li></ol><p><code>$((运算式))</code> 或 <code>$[运算式]</code></p><ol start="2"><li>案例实操</li></ol><ul><li>计算（2+3）*4 的值</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# S=$[(2+3)*4]</span><br><span class="line">[root@centos_01 scripts]# echo $S</span><br><span class="line">20</span><br></pre></td></tr></table></figure><ul><li>加法器</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# vim add.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">A=$1</span><br><span class="line">B=$2</span><br><span class="line">echo $[A+B]</span><br><span class="line">[root@centos_01 scripts]# bash add.sh 2 3</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h2 id="条件判断">条件判断</h2><ol><li>基本语法</li></ol><ul><li><code>test</code> 条件表达式</li><li>[ 条件表达式 ]（<strong>注意表达式前后要有空格</strong>）</li><li>也可以使用 ((条件表达式))。在其中，小于可以使用<code>&lt;</code>符号代替</li></ul><ol start="2"><li>常用判断条件</li></ol><ul><li>两个整数之间比较</li></ul><table><thead><tr><th>判断条件</th></tr></thead><tbody><tr><td><code>-eq</code> 等于（equal）</td></tr><tr><td><code>-ne</code> 不等于（not equal）</td></tr><tr><td><code>-lt</code> 小于（less than）</td></tr><tr><td><code>-le</code> 小于等于（less equal）</td></tr><tr><td><code>-gt</code> 大于（greater than）</td></tr><tr><td><code>-ge</code>大于等于（greater equal）</td></tr></tbody></table><ul><li>按照文件权限进行判断</li></ul><p><code>-r</code> 有读的权限（read）</p><p><code>-w</code> 有写的权限（write）</p><p><code>-x</code>有执行的权限（execute）</p><ul><li>按照文件类型进行判断</li></ul><p><code>-e</code>：文件存在（existence）</p><p><code>-f</code>：文件存在并且是一个常规的文件（file）</p><p><code>-d</code>：文件存在并且是一个目录（directory）</p><ol start="3"><li>案例实操</li></ol><ul><li>检测23是否大于等于22</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# test 23 -ge 22</span><br><span class="line">[root@centos_01 scripts]# echo $?</span><br><span class="line">0# 0 说明之前测试通过即为true，1说明之前测试没通过即为false</span><br><span class="line">[root@centos_01 scripts]# test 22 -ge 23</span><br><span class="line">[root@centos_01 scripts]# echo $?</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">[root@centos_01 scripts]# [ 23 -ge 22 ]</span><br><span class="line">[root@centos_01 scripts]# echo $?</span><br><span class="line">0</span><br></pre></td></tr></table></figure><ul><li>检测<code>helloworld.sh</code>是否具有写权限</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# [ -w ./helloword.sh ]</span><br><span class="line">[root@centos_01 scripts]# echo $?</span><br><span class="line">0</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>/root/cls.txt</code>是否存在</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# [ -e /root/cls.txt ]</span><br><span class="line">[root@centos_01 scripts]# echo $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure><ul><li>检测<code>环境变量A</code>的值是否为hello</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# A=hello# 新建一个环境变量为A，赋值为hello</span><br><span class="line">[root@centos_01 scripts]# echo $A</span><br><span class="line">hello</span><br><span class="line">[root@centos_01 scripts]# [ $A = hello ]# 注意空格</span><br><span class="line">[root@centos_01 scripts]# echo $?</span><br><span class="line">0</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>多条件判断（<code>&amp;&amp;</code>表示前一条命令执行成功后，才执行后一条命令；<code>||</code>表示上一条命令执行失败后，才执行下一条命令）</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# [ 23 -ge 22 ] &amp;&amp; echo OK || echo notOK</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">[root@centos_01 scripts]# [ 23 -le 22 ] &amp;&amp; echo OK || echo notOK</span><br><span class="line">notOK</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="流程控制">流程控制</h2><h3 id="if-判断">if 判断</h3><ol><li>基本语法</li></ol><ul><li>单分支</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ 条件判断式 ];then</span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>多分支</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">elif [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">程序</span><br><span class="line">else</span><br><span class="line">程序</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ul><li>[ 条件判断式 ] 中括号和条件判断式之间必须有空格</li><li>if后面要有空格</li><li>以上使用的<code>[]</code>可以换成<code>(())</code>两个小括号，这样更方便。若使用<code>(())</code>，则条件判断式中的<code>-eq</code>等符号，可以换成<code>==</code>等符号</li></ul></blockquote><ol start="2"><li>案例</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# touch if.sh</span><br><span class="line">[root@centos_01 scripts]# vim if.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [ $1 -eq 1 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;this parameter is equal to 1&quot;</span><br><span class="line">elif [ $1 -ge 2 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;this parameter is greater equal 2&quot;</span><br><span class="line">fi</span><br><span class="line">[root@centos_01 scripts]# bash if.sh 3</span><br><span class="line">this parameter is greater equal 2</span><br><span class="line">[root@centos_01 scripts]# bash if.sh 1</span><br><span class="line">this parameter is equal to 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="case-语句">case 语句</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">&quot;值1&quot;)</span><br><span class="line">如果变量的值等于值1，则执行程序1</span><br><span class="line">;;</span><br><span class="line">&quot;值2&quot;)</span><br><span class="line">如果变量的值等于值2，则执行程序2</span><br><span class="line">;;</span><br><span class="line">...省略其他分支...</span><br><span class="line">*)</span><br><span class="line">如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ul><li>case 行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束</li><li>双分号“;;”表示命令序列结束，相当于java 中的break。</li><li>最后的“*）”表示默认模式，相当于java 中的default</li></ul></blockquote><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# touch case.sh</span><br><span class="line">[root@centos_01 scripts]# vim case.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">        echo &quot;this parameter == 1&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;2&quot;)</span><br><span class="line">        echo &quot;this parameter == 2&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;3&quot;)</span><br><span class="line">        echo &quot;this parameter == 3&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">        echo &quot;this parameter &gt; 3&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">[root@centos_01 scripts]# bash case.sh 2</span><br><span class="line">this parameter == 2</span><br><span class="line">[root@centos_01 scripts]# bash case.sh 3</span><br><span class="line">this parameter == 3</span><br><span class="line">[root@centos_01 scripts]# bash case.sh 4</span><br><span class="line">this parameter &gt; 3</span><br></pre></td></tr></table></figure><h3 id="for-循环">for 循环</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for (( 初始值;循环控制条件;变量变化))</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ol start="2"><li>案例</li></ol><ul><li>从1加到100</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# touch for1.sh</span><br><span class="line">[root@centos_01 scripts]# vim for1.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">sum=0</span><br><span class="line">for ((i=0;i&lt;=100;i++))# 注：这里使用双小括号了，所以可以使用&lt;=符号</span><br><span class="line">do</span><br><span class="line">        sum=$[$sum+$i]</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br><span class="line">[root@centos_01 scripts]# bash for1.sh</span><br><span class="line">5050</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以如下</span></span><br><span class="line">[root@centos_01 scripts]# for i in &#123;1..100&#125;; do sum=$[$sum+$i]; done; echo $sum</span><br><span class="line">5050</span><br></pre></td></tr></table></figure><ol start="3"><li>基本语法2</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3 ...</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ol start="4"><li>案例</li></ol><ul><li>打印所有输入参数</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# touch for2.sh</span><br><span class="line">[root@centos_01 scripts]# vim for2.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打印数字</span></span><br><span class="line"></span><br><span class="line">for i in cls mly wls</span><br><span class="line">do</span><br><span class="line">        echo &quot;bang zhang love $i&quot;</span><br><span class="line">done</span><br><span class="line">[root@centos_01 scripts]# bash for2.sh</span><br><span class="line">bang zhang love cls</span><br><span class="line">bang zhang love mly</span><br><span class="line">bang zhang love wls</span><br></pre></td></tr></table></figure><ul><li>比较<code>$*</code> 和 <code>$@</code> 的区别</li></ul><p><code>$*</code>和​<code>$@</code>都表示传递给函数或脚本的所有参数，不被双引号“”包含时，都以​<code>$1</code> <code>$2</code> …<code>$n</code><br>的形式输出所有参数。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# vim for3.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &#x27;===============$*================&#x27;</span><br><span class="line">for i in $*</span><br><span class="line">do</span><br><span class="line">        echo &quot;ban zhang love $i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &#x27;==============$@================&#x27;</span><br><span class="line">for j in $@</span><br><span class="line">do</span><br><span class="line">        echo &quot;ban zhang love $j&quot;</span><br><span class="line">done</span><br><span class="line">[root@centos_01 scripts]# bash for3.sh cls mly wls</span><br><span class="line">===============$*================</span><br><span class="line">ban zhang love cls</span><br><span class="line">ban zhang love mly</span><br><span class="line">ban zhang love wls</span><br><span class="line">==============$@================</span><br><span class="line">ban zhang love cls</span><br><span class="line">ban zhang love mly</span><br><span class="line">ban zhang love wls</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当它们被双引号“”包含时，<code>$*</code>会将所有的参数作为一个整体，以“​<code>$1</code> ​<code>$2</code> …<code>$n</code>”的形式输<br>出所有参数；<code>$@</code>会将各个参数分开，以“​<code>$1</code>” “​<code>$2</code>”…“​<code>$n</code>”的形式输出所有参数。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# vim for4.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &#x27;=================$*===========&#x27;</span><br><span class="line">for i in &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">        echo &quot;ban zhang love $i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &#x27;================$@===========&#x27;</span><br><span class="line">for j in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">        echo &quot;bang zhang love $j&quot;</span><br><span class="line">done</span><br><span class="line">[root@centos_01 scripts]# bash for4.sh cls mly wls</span><br><span class="line">=================$*===========</span><br><span class="line">ban zhang love cls mly wls</span><br><span class="line">================$@===========</span><br><span class="line">bang zhang love cls</span><br><span class="line">bang zhang love mly</span><br><span class="line">bang zhang love wls</span><br></pre></td></tr></table></figure><h3 id="while-循环">while 循环</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">程序</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ol start="2"><li>案例</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# vim while.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">sum=0</span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 100 ]</span><br><span class="line">do</span><br><span class="line">        sum=$[$sum+$i]</span><br><span class="line">        i=$[$i+1]</span><br><span class="line">done</span><br><span class="line">echo $sum</span><br><span class="line">[root@centos_01 scripts]# bash while.sh</span><br><span class="line">5050</span><br></pre></td></tr></table></figure><h3 id="read-读取控制台输入">read 读取控制台输入</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">read 选项 参数</span><br></pre></td></tr></table></figure><ul><li><p>选项：</p><p><code>-p</code>：指定读取值时的提示符</p><p><code>-t</code>：指定读取值时等待的时间（秒），超时退出。如果<code>-t</code>不加，则表示一直等待</p></li><li><p>参数：</p><p>变量：指定读取值的变量名</p></li></ul><ol start="2"><li>案例</li></ol><p>提示7秒内，读取控制台输入的名称</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# vim read.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">read -t 7 -p &quot;Enter your name in 7 seconds: &quot; NN</span><br><span class="line">echo $NN</span><br><span class="line">[root@centos_01 scripts]# bash read.sh</span><br><span class="line">Enter your name in 7 seconds: hello world</span><br><span class="line">hello world</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数">函数</h2><h3 id="系统函数">系统函数</h3><h4 id="basename">basename</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">basename [string/pathname] [suffix] # 功能描述：basename 命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来</span><br></pre></td></tr></table></figure><p><strong>basename 可以理解为取路径里的文件名称</strong></p><p>选项：</p><p>suffix 为后缀，如果suffix 被指定了，basename 会将pathname 或string 中的suffix 去掉。</p><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# basename /root/ifcfg-ens33.bk</span><br><span class="line">ifcfg-ens33.bk</span><br><span class="line">[root@centos_01 ~]# basename /root/ifcfg-ens33.bk  .bk</span><br><span class="line">ifcfg-ens33</span><br></pre></td></tr></table></figure><h4 id="dirname">dirname</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dirname 文件绝对路径# 从给定的包含绝对路径或相对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））</span><br></pre></td></tr></table></figure><p><strong>dirname 可以理解为取文件路径的绝对路径或相对路径名称</strong></p><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# dirname /root/ifcfg-ens33.bk</span><br><span class="line">/root</span><br><span class="line">[root@centos_01 ~]# dirname ./ifcfg-ens33.bk</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h3 id="自定义函数">自定义函数</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[ function ] funname[()]</span><br><span class="line">&#123;</span><br><span class="line">Action;</span><br><span class="line">[return int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>注意事项</li></ol><ul><li><p>上述<code>[]</code>括号，表示可选项</p></li><li><p>必须在调用函数地方之前，先声明函数，shell 脚本是逐行运行。不会像其它语言一<br>样先编译。</p></li><li><p>函数返回值，只能通过<code>$?</code>系统变量获得，可以显示加：return 返回，如果不加，将<br>以最后一条命令运行结果，作为返回值。return 后跟数值n(0-255)。<strong>注：return只能返回数值型的结果，且结果范围在[0,255]之间</strong></p></li></ul><ol start="3"><li>案例实操</li></ol><p>计算两个输入参数的和</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# vim fun.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">function sum()</span><br><span class="line">&#123;</span><br><span class="line">        s=0</span><br><span class="line">        s=$[$1+$2]</span><br><span class="line">        echo &quot;$s&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read -p &quot;Please input the number1: &quot; n1</span><br><span class="line">read -p &quot;Please input the number2: &quot; n2</span><br><span class="line">sum $n1 $n2</span><br><span class="line">[root@centos_01 ~]# bash fun.sh</span><br><span class="line">Please input the number1: 2</span><br><span class="line">Please input the number2: 5</span><br><span class="line">7</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>第二个例子</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# vim fun.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">function sum()</span><br><span class="line">&#123;</span><br><span class="line">        s=0</span><br><span class="line">        s=$[$1+$2]</span><br><span class="line">        return $s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">read -p &quot;Please input the number1: &quot; n1</span><br><span class="line">read -p &quot;Please input the number2: &quot; n2</span><br><span class="line"></span><br><span class="line">sum $n1 $n2</span><br><span class="line">echo &quot;sum = &quot;$?</span><br><span class="line">[root@centos_01 scripts]# bash fun.sh</span><br><span class="line">Please input the number1: 1</span><br><span class="line">Please input the number2: 2</span><br><span class="line">sum = 3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="调用系统函数">调用系统函数</h3><p>在一个脚本中调用系统函数<code>date</code>的示例：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# vim cmd_test.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">filename=&quot;$1&quot;_log_$(date +%s)</span><br><span class="line">echo $filename</span><br><span class="line">[root@centos_01 scripts]# bash cmd_test.sh mysql</span><br><span class="line">mysql_log_1679136612</span><br></pre></td></tr></table></figure><p>其中，<code>date +%s</code>即是系统函数</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# date +%s</span><br><span class="line">1679136655</span><br></pre></td></tr></table></figure><h2 id="正则表达式入门">正则表达式入门</h2><p>正则表达式使用单个字符串来描述、匹配一系列符合某个语法规则的字符串。在很多文<br>本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。在Linux 中，<code>grep</code>，<code>sed</code>，<code>awk</code> 等文本处理工具都支持通过正则表达式进行模式匹配。</p><h3 id="常规匹配">常规匹配</h3><p>纯文本匹配：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# cat /etc/passwd | grep root</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会匹配所有包含<code>root</code>的行</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201657003.png" alt="image-20230318202014082"></p><h3 id="常用特殊字符">常用特殊字符</h3><h4 id="特殊字符：">特殊字符：<code>^</code></h4><p><code>^</code>匹配一行的开头，如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# cat /etc/passwd | grep ^a</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br></pre></td></tr></table></figure><p>会匹配所有以<code>a</code>开头的行</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201657004.png" alt="image-20230318202001335"></p><h4 id="特殊字符：-2">特殊字符：<code>$</code></h4><p><code>$</code>匹配一行的结束，如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# cat /etc/passwd | grep t$</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br></pre></td></tr></table></figure><p>会匹配所有以<code>t</code>结尾的行</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201657005.png" alt="image-20230318201945683"></p><h4 id="特殊字符：-3">特殊字符：<code>.</code></h4><p><code>.</code>匹配一个任意字符：如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# cat /etc/passwd | grep r..t</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201657006.png" alt="image-20230318201927881"></p><h4 id="特殊字符：-4">特殊字符：<code>*</code></h4><p><code>*</code>不单独使用，它和上一个字符连用，表示匹配上一个字符0次或多次。如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# cat /etc/passwd | grep r*t</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201657007.png" alt="image-20230318201913591"></p><h4 id="字符区间（中括号）：">字符区间（中括号）：<code>[]</code></h4><p><code>[]</code>表示匹配某个范围内的一个字符。如：</p><p>[6,8]——匹配6或8</p><p>[0-9]——匹配一个0-9的数字</p><p>[0-9]*——匹配任意长度的数字字符串</p><p>[a-z]——匹配一个a-z之间的字符</p><p>[a-z]*——匹配任意长度的字母字符串</p><p>[a-c, e-f]——匹配a-c或者e-f之间的任意字符</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# cat /etc/passwd | grep r[a,b,c]*t</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303201657008.png" alt="image-20230318202323842"></p><h4 id="特殊字符：-5">特殊字符：<code>\</code></h4><p><code>\</code>表示转义，并不会单独使用。由于所有特殊字符都有其特定匹配模式，当我们想匹配<br>某一特殊字符本身时（例如，我想找出所有包含’$’ 的行），就会碰到困难。此时我们就要<br>将转义字符和特殊字符连用，来表示特殊字符本身，例如</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# cat /etc/passwd | grep &#x27;a\$b&#x27;</span><br></pre></td></tr></table></figure><p>就会匹配所有包含<code>a$b</code> 的行。注意需要使用单引号将表达式引起来。</p><h2 id="文本处理工具">文本处理工具</h2><h3 id="cut">cut</h3><p>cut 的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每<br>一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cut [选项参数] filename</span><br></pre></td></tr></table></figure><p>说明：默认分隔符是制表符</p><ol start="2"><li>选项参数</li></ol><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-f</td><td>列号，提取第几列</td></tr><tr><td>-d</td><td>分隔符，按照指定分隔符分割列，默认是制表符<code>\t</code></td></tr><tr><td>-c</td><td>按字符进行切割，后加<code>n</code>表示取第几列。比如<code>-c 1</code></td></tr></tbody></table><ol start="3"><li>案例</li></ol><p>（1）先准备一些数据</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# touch cut.txt</span><br><span class="line">[root@centos_01 ~]# vim cut.txt</span><br><span class="line">dong shen</span><br><span class="line">guan zhen</span><br><span class="line">wo  wo</span><br><span class="line">lai lai</span><br><span class="line">le le</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）切割cut.txt第一列</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# cut -d &quot; &quot; -f 1 cut.txt</span><br><span class="line">dong</span><br><span class="line">guan</span><br><span class="line">wo</span><br><span class="line">lai</span><br><span class="line">le</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）切割cut.txt第二、三列</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# cut -d &quot; &quot; -f 2,3 cut.txt</span><br><span class="line">shen</span><br><span class="line">zhen</span><br><span class="line"> wo</span><br><span class="line">lai</span><br><span class="line">le</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（4）在cut.txt中切割出guan</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# cat cut.txt | grep guan | cut -d &quot; &quot; -f 1</span><br><span class="line">guan</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（5）选取系统<code>PATH</code>变量值，切割出第二个<code>:</code>开始后的所有路径</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">[root@centos_01 ~]# echo $PATH | cut -d &quot;:&quot; -f 3</span><br><span class="line">/usr/sbin</span><br><span class="line">[root@centos_01 ~]# echo $PATH | cut -d &quot;:&quot; -f 3-</span><br><span class="line">/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><p>（6）切割<code>ifconfig</code>后打印的IP地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# ifconfig ens33</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.179.130  netmask 255.255.255.0  broadcast 192.168.179.255</span><br><span class="line">        inet6 fe80::c757:d7e1:da2f:cd02  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:76:4f:1f  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 919843  bytes 60566561 (57.7 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1664702  bytes 191447146 (182.5 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">[root@centos_01 ~]# ifconfig ens33 | grep netmask | cut -d &quot; &quot; -f 10</span><br><span class="line">192.168.179.130</span><br></pre></td></tr></table></figure><h3 id="awk">awk</h3><p>一个强大的文本分析工具，<strong>把文件逐行的读入</strong>，以空格为默认分隔符将每行切片，切开<br>的部分再进行分析处理。</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk [选项参数] &#x27;/pattern1/&#123;action1&#125; /pattern2/&#123;action2&#125;...&#x27; filename</span><br></pre></td></tr></table></figure><ul><li><code>pattern</code>：表示<code>awk</code>在数据中查找的内容，就是匹配模式</li><li><code>action</code>：在找到匹配内容时所执行的一系列命令</li></ul><ol start="2"><li>选项参数</li></ol><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-F</td><td>指定输入文件分隔符</td></tr><tr><td>-v</td><td>赋值一个用户定义变量</td></tr></tbody></table><ol start="3"><li>案例实操</li></ol><p>（1）数据准备</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# cp /etc/passwd ./</span><br><span class="line">[root@centos_01 ~]# cat passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure><p>（2）搜索passwd文件以root关键字开头的所有行，并输出该行的第7列</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# awk -F : &#x27;/^root/&#123;print $7&#125;&#x27; passwd</span><br><span class="line">/bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（3）搜索passwd文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“,”号分割</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# awk -F : &#x27;/^root/&#123;print $1&quot;, &quot;$7&#125;&#x27; passwd</span><br><span class="line">root, /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：只有匹配了pattern的行才会执行action</p><p>（4）只显示/etc/passwd的第一列和第七列，以逗号分割，且在所有行前面添加列名“user，shell”，在最后一行添加“dahaige, /bin/zuishuai”</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# awk -F : &#x27;BEGIN&#123;print &quot;user, shell&quot;&#125; &#123;print $1&quot;, &quot;$7&#125;END&#123;print &quot;dahaige,/bin/zuishuai&quot;&#125;&#x27; passwd</span><br><span class="line">user, shell</span><br><span class="line">root, /bin/bash</span><br><span class="line">bin, /sbin/nologin</span><br><span class="line">... ...</span><br><span class="line">chrony, /sbin/nologin</span><br><span class="line">dahaige,/bin/zuishuai</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</p><p>（5）蒋passwd文件中的用户id增加数值1并输出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# awk -v i=1 -F : &#x27;&#123;print $3+i&#125;&#x27; passwd</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="综合应用案例">综合应用案例</h2><h3 id="归档文件">归档文件</h3><p>实际生产应用中，往往需要对重要数据进行归档备份。<br>需求：实现一个每天对指定目录归档备份的脚本，输入一个目录名称（末尾不带/），<br>将目录下所有文件按天归档保存，并将归档日期附加在归档文件名上，放在<code>/root/archive</code> 下。<br>这里用到了归档命令：<code>tar</code><br>后面可以加上-c 选项表示归档，加上-z 选项表示同时进行压缩，得到的文件后缀名<br>为<code>.tar.gz</code>。</p><p>脚本实现如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先判断输入参数的个数是否为1</span></span><br><span class="line">if [ $# -ne 1 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot; 参数个数错误!应该输入一个参数，作为归档目录名&quot;</span><br><span class="line">        exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从参数中获取目录名称</span></span><br><span class="line">if [ -d $1 ]</span><br><span class="line">then</span><br><span class="line">        echo</span><br><span class="line">else</span><br><span class="line">        echo</span><br><span class="line">        echo &quot;目录不存在!&quot;</span><br><span class="line">        echo</span><br><span class="line">        exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">DIR_NAME=$(basename $1)</span><br><span class="line">DIR_PATH=$(cd $(dirname $1); pwd)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前日期</span></span><br><span class="line">DATE=$(date +%y%m%d)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义生成的归档文件名称</span></span><br><span class="line">FILE=archive_$&#123;DIR_NAME&#125;_$DATE.tar.gz</span><br><span class="line">DEST=/root/archive/$FILE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开始归档目录文件</span></span><br><span class="line">echo &quot;开始归档...&quot;</span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">tar -czf $DEST $DIR_PATH/$DIR_NAME</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then</span><br><span class="line">        echo</span><br><span class="line">        echo &quot;归档成功!&quot;</span><br><span class="line">        echo &quot;归档文件为: $DEST&quot;</span><br><span class="line">else</span><br><span class="line">        echo</span><br><span class="line">        echo &quot;归档出现问题!&quot;</span><br><span class="line">        echo</span><br><span class="line">fi</span><br><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行脚本：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 scripts]# ./archive.sh</span><br><span class="line"> 参数个数错误!应该输入一个参数，作为归档目录名</span><br><span class="line"> [root@centos_01 scripts]# ./archive.sh .</span><br><span class="line"></span><br><span class="line">开始归档...</span><br><span class="line"></span><br><span class="line">tar: Removing leading `/&#x27; from member names</span><br><span class="line">tar (child): /root/archive/archive_._230318.tar.gz: Cannot open: No such file or directory</span><br><span class="line">tar (child): Error is not recoverable: exiting now</span><br><span class="line">tar: Child returned status 2</span><br><span class="line">tar: Error is not recoverable: exiting now</span><br><span class="line"></span><br><span class="line">归档出现问题!</span><br><span class="line"></span><br><span class="line">[root@centos_01 scripts]# mkdir /root/archive</span><br><span class="line">[root@centos_01 scripts]# ./archive.sh .</span><br><span class="line"></span><br><span class="line">开始归档...</span><br><span class="line"></span><br><span class="line">tar: Removing leading `/&#x27; from member names</span><br><span class="line"></span><br><span class="line">归档成功!</span><br><span class="line">归档文件为: /root/archive/archive_._230318.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础（二）常用命令</title>
      <link href="/2023/03/11/Linux%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/03/11/Linux%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="帮助命令">帮助命令</h2><h3 id="man-获得帮助信息">man 获得帮助信息</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man [命令或配置文件]# 获得帮助信息</span><br></pre></td></tr></table></figure><ol start="2"><li>显示说明</li></ol><table><thead><tr><th>信息</th><th>功能</th></tr></thead><tbody><tr><td>NAME</td><td>命令的名称和单行描述</td></tr><tr><td>SYNOPSIS</td><td>怎样使用命令</td></tr><tr><td>DESCRIPTION</td><td>命令功能的深入讨论</td></tr><tr><td>EXAMPLES</td><td>怎样使用命令的例子</td></tr><tr><td>SEE ALSO</td><td>相关主题</td></tr></tbody></table><ol start="3"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man ls</span><br></pre></td></tr></table></figure><h3 id="help获得shell内置命令的帮助信息">help获得shell内置命令的帮助信息</h3><p>一部分基础功能的系统命令是直接内嵌在shell 中的，系统加载启动之后会随着shell一起加载，常驻系统内存中。这部分命令被称为“内置（built-in）命令”；相应的其它命令被称为“外部命令”。</p><blockquote><p>如何查看一个命令是内置（built-in）命令还是外部命令：</p><p>可以使用以下命令来验证：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type [命令]</span><br></pre></td></tr></table></figure><p>如：</p><ol><li>表示内置：<img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912334.png" alt="image-20230311215328555"></li><li>表示外部：<img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912335.png" alt="image-20230311215402838"></li></ol></blockquote><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help [命令]# 获得shell内置命令的帮助信息</span><br></pre></td></tr></table></figure><ol start="2"><li>案例实操</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help cd</span><br></pre></td></tr></table></figure><h3 id="常用快捷键">常用快捷键</h3><table><thead><tr><th>常用快捷键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl + c</td><td>停止进程</td></tr><tr><td>ctrl+l</td><td>清屏，等同于clear；彻底清屏是：reset</td></tr><tr><td>善于用tab键</td><td>提示(更重要的是可以防止敲错)</td></tr><tr><td>上下键</td><td>查找执行过的命令</td></tr></tbody></table><h2 id="文件目录类">文件目录类</h2><h3 id="pwd显示当前工作目录的绝对路径">pwd显示当前工作目录的绝对路径</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pwd# 显示当前工作目录的绝对路径</span><br></pre></td></tr></table></figure><ol start="2"><li>例子</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos_01 ~]# pwd</span><br><span class="line">/root</span><br></pre></td></tr></table></figure><h3 id="ls-列出目录的内容">ls 列出目录的内容</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls [选项] [目录或文件]</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>全部的文件，连同隐藏档( 开头为. 的文件) 一起列出来(常用)</td></tr><tr><td>-l</td><td>长数据串列出，包含文件的属性与权限等等数据；(常用)等价于“ll”</td></tr></tbody></table><h3 id="cd-切换目录">cd 切换目录</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd [参数]</span><br></pre></td></tr></table></figure><ol start="2"><li>参数说明</li></ol><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>cd 绝对路径/相对路径</td><td>切换路径</td></tr><tr><td>cd ~</td><td>回到自己的家目录</td></tr><tr><td>cd -</td><td>回到上一次所在目录</td></tr><tr><td>cd …</td><td>回到当前目录的上一级目录</td></tr><tr><td>cd -P</td><td>跳转到实际物理路径，而非快捷方式路径</td></tr></tbody></table><h3 id="mkdir-创建一个新目录">mkdir 创建一个新目录</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir [选项] [要创建的目录]</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>创建多层目录</td></tr></tbody></table><h3 id="rmdir-删除一个空的目录">rmdir 删除一个空的目录</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rmdir [选项] [要删除空的目录]</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>删除目录及父目录（如：‘rmdir -p a/b/c’ == ‘rmdir a/b/c a/b a’）</td></tr></tbody></table><h3 id="touch-创建空文件">touch 创建空文件</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch [文件名]</span><br></pre></td></tr></table></figure><h3 id="cp-复制文件或目录">cp 复制文件或目录</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp [选项] source dest# 复制source文件到dest</span><br></pre></td></tr></table></figure><ol start="2"><li>选项</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归复制整个文件夹</td></tr></tbody></table><ol start="3"><li>参数说明</li></ol><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>source</td><td>源文件</td></tr><tr><td>dest</td><td>目标文件</td></tr></tbody></table><h3 id="rm-删除文件或目录">rm 删除文件或目录</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm [选项] [目录或文件]</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归删除目录中所有内容</td></tr><tr><td>-f</td><td>强制执行删除操作，而不提示用于进行确认</td></tr><tr><td>-v</td><td>显示指令的详细执行过程</td></tr></tbody></table><h3 id="mv-移动文件与目录或重命名">mv 移动文件与目录或重命名</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv oldNameFile newNameFile# 重命名</span><br><span class="line">mv /temp/movefile /targetFolder# 移动文件</span><br></pre></td></tr></table></figure><h3 id="cat-查看文件内容">cat 查看文件内容</h3><p>查看文件内容，从第一行开始显示。</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat [选项] 要查看的文件</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能描述</th></tr></thead><tbody><tr><td>-n</td><td>显示所有行的行号，包括空行</td></tr></tbody></table><p>一般用来查看比较小的文件</p><h3 id="more-文件内容分屏查看器">more 文件内容分屏查看器</h3><p>more 指令是一个基于VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件<br>的内容。more 指令中内置了若干快捷键，详见操作说明。</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">more 要查看的文件</span><br></pre></td></tr></table></figure><ol start="2"><li>操作说明</li></ol><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>&quot;space&quot;键</td><td>向下翻一页</td></tr><tr><td>&quot;Enter&quot;键</td><td>向下翻一行</td></tr><tr><td>q</td><td>立即离开more，不再显示该文件内容</td></tr><tr><td>Ctrl + f</td><td>向下滚动一屏</td></tr><tr><td>Ctrl + b</td><td>返回上一屏</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><h3 id="less-分屏显示文件内容">less 分屏显示文件内容</h3><p>less 指令用来分屏查看文件内容，它的功能与more 指令类似，但是比more 指令更加<br>强大，支持各种显示终端。less 指令在显示文件内容时，并不是一次将整个文件加载之后<br>才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">less 要查看的文件</span><br></pre></td></tr></table></figure><ol start="2"><li>操作说明</li></ol><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>&quot;Space&quot;键</td><td>向下翻动一页</td></tr><tr><td>[pagedown]键</td><td>向下翻动一页</td></tr><tr><td>[pageup]键</td><td>向上翻动一页</td></tr><tr><td>/字符串</td><td>向下搜寻[字符串]的功能; n: 向下查找；N：向上查找</td></tr><tr><td>?字符串</td><td>向上搜寻[字符串]的功能；n: 向上查找；N：向下查找</td></tr><tr><td>q</td><td>离开less</td></tr></tbody></table><h3 id="echo">echo</h3><p>echo 输出内容到控制台</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo [选项] [输出内容到控制台]</span><br></pre></td></tr></table></figure><ol start="2"><li>选项</li></ol><table><thead><tr><th>操作</th><th>作用</th></tr></thead><tbody><tr><td>-e</td><td>支持反斜线控制的字符转换</td></tr></tbody></table><table><thead><tr><th>控制字符</th><th>作用</th></tr></thead><tbody><tr><td><code>\\</code></td><td>输出<code>\</code>本身</td></tr><tr><td><code>\n</code></td><td>换行符</td></tr><tr><td><code>\t</code></td><td>制表符</td></tr></tbody></table><ol start="3"><li>例子</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912337.png" alt="image-20230312134540671"></p><h3 id="输出重定向-和-追加">&gt; 输出重定向 和 &gt;&gt; 追加</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l &gt; a.txt# 将列表的内容写入文件a.txt中（覆盖写）</span><br><span class="line"></span><br><span class="line">ls -al &gt;&gt; a.txt# 将列表的内容追加到文件a.txt的末尾</span><br><span class="line"></span><br><span class="line">cat a.txt &gt; b.txt# 将文件a.txt的内容覆盖到文件b.txt</span><br><span class="line"></span><br><span class="line">echo &quot;内容&quot; &gt;&gt; a.txt# 将echo要打印的内容写入a.txt</span><br></pre></td></tr></table></figure><ol start="2"><li>例子</li></ol><ul><li>将<code>ls</code>查看的信息写入文件中</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l &gt; a.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912338.png" alt="image-20230312135026479"></p><h3 id="head-显示文件头部内容">head 显示文件头部内容</h3><p>head 用于显示文件的开头部分内容，默认情况下head 指令显示文件的前10 行内容。</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head 文件# 查看文件头10行内容</span><br><span class="line"></span><br><span class="line">head -n 5 文件# 查看文件头5行内容</span><br></pre></td></tr></table></figure><h3 id="tail输出文件尾部内容">tail输出文件尾部内容</h3><p>tail 用于输出文件中尾部的内容，默认情况下tail 指令显示文件的后10 行内容。</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail 文件# 查看文件尾部10行内容</span><br><span class="line"></span><br><span class="line">tail -n 5 文件# 查看文件尾部5行内容</span><br><span class="line"></span><br><span class="line">tail -f 文件# 实时追踪该文档的所有更新，监控文件变化</span><br></pre></td></tr></table></figure><h3 id="history-查看已经执行过的历史命令">history 查看已经执行过的历史命令</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history</span><br></pre></td></tr></table></figure><h2 id="搜索查找类">搜索查找类</h2><h3 id="find-查找文件或目录">find 查找文件或目录</h3><p>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件显示在终端。</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find [搜索范围] [选项]</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-name &lt;文件名&gt;</td><td>按照指定的文件名查找模式查找文件</td></tr><tr><td>-user &lt;用户名&gt;</td><td>查找属于指定用户名所有文件</td></tr><tr><td>-size &lt;文件大小&gt;</td><td>按照指定的文件大小查找文件,单位为:<br />b —— 块（512 字节）<br />c —— 字节<br />w —— 字（2 字节）<br />k —— 千字节<br />M —— 兆字节<br />G —— 吉字节</td></tr></tbody></table><ol start="3"><li>案例</li></ol><ul><li>根据文件名查找：在<code>/root</code>目录下查找所有后缀是<code>.txt</code>的文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /root -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure><ul><li>按文件大小：在/home目录下查找大于200m的文件（+n 大于-n小于n等于）</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find /home -size +204800</span><br></pre></td></tr></table></figure><h3 id="locate-快速定位文件路径">locate 快速定位文件路径</h3><p>locate 指令利用事先建立的系统中所有文件名称及路径的locate 数据库实现快速定位给<br>定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确<br>度，管理员必须定期更新locate 时刻。</p><p>该命令不是默认安装在Linux中的，所以需要下载：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install mlocate</span><br></pre></td></tr></table></figure><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locate 搜索文件</span><br></pre></td></tr></table></figure><ol start="2"><li><p>说明：由于locate 指令基于数据库进行查询，所以第一次运行前，必须使用<code>updatedb </code>指令创建locate 数据库。</p></li><li><p>例子</p></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">updatedb</span><br><span class="line">locate root</span><br></pre></td></tr></table></figure><h3 id="grep-过滤查找及-管道符">grep 过滤查找及<code>|</code>管道符</h3><p>管道符，<code>|</code>，表示将前一个命令的处理结果输出传递给后面的命令处理</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep [选项] [查找内容/源文件]</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr></tbody></table><ol start="3"><li>例子</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls | grep -n a.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912339.png" alt="image-20230312155508124"></p><h2 id="压缩和解压类">压缩和解压类</h2><h3 id="gzip-gunzip">gzip/gunzip</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gzip 文件# 压缩文件，将文件压缩为*.gz文件</span><br><span class="line"></span><br><span class="line">gunzip 文件.gz# 将*.gz文件解压缩</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ul><li>只能压缩文件，不能压缩目录</li><li>不保留原来的文件</li><li>可以同时压缩/解压缩多个文件</li></ul></blockquote><h3 id="zip-unzip">zip/unzip</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip [选项] XXX.zip 将要压缩的内容# 可以将文件和目录压缩</span><br><span class="line"></span><br><span class="line">unzip [选项] XXX.zip# 解压缩</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>zip 选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>压缩目录</td></tr></tbody></table><table><thead><tr><th>unzip 选项</th><th>功能</th></tr></thead><tbody><tr><td>-d &lt;目录&gt;</td><td>指定解压后的文件的存放目录</td></tr></tbody></table><blockquote><p>注：</p><p>zip压缩命令在windows/linux都通用，可以压缩目录且保留源文件</p></blockquote><h3 id="tar">tar</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar [选项] XXX.tar.gz &lt;要打包的内容&gt;# 可以打包内容/解包</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar 打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-x</td><td>解包.tar 文件</td></tr><tr><td>-C</td><td>解压到指定目录</td></tr></tbody></table><ol start="3"><li>例子</li></ol><ul><li>压缩多个文件</li></ul><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912340.png" alt="image-20230312160643921"></p><ul><li>压缩目录</li></ul><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912341.png" alt="image-20230312160657539"></p><ul><li>解压到当前目录</li></ul><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912342.png" alt="image-20230312160715451"></p><ul><li>解压到指定目录</li></ul><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912343.png" alt="image-20230312160731027"></p><blockquote><p>一般遇到<code>.tar.gz</code>的需使用<code>tar</code>命令</p><ul><li><code>tar -zcvf</code> 用于压缩</li><li><code>tar -zxvf</code> 用于解压</li></ul></blockquote><h2 id="磁盘查看和分区类">磁盘查看和分区类</h2><h3 id="du-查看文件和目录占用的磁盘空间">du 查看文件和目录占用的磁盘空间</h3><p><code>du</code> 全称为 <code>disk usage</code>磁盘占用情况</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du 目录/文件# 显示目录下每个子目录的磁盘使用情况</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-h</td><td>以人们较易阅读的GBytes, MBytes, KBytes 等格式自行显示；</td></tr><tr><td>-a</td><td>不仅查看子目录大小，还要包括文件</td></tr><tr><td>-c</td><td>显示所有的文件和子目录大小后，显示总和</td></tr><tr><td>-s</td><td>只显示总和</td></tr><tr><td>–max-depth=n</td><td>指定统计子目录的深度为第n 层</td></tr></tbody></table><h3 id="df-查看磁盘空间使用情况">df 查看磁盘空间使用情况</h3><p><code>df</code>全称为<code>disk free</code> 空余磁盘</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df [选项]#列出文件系统的整体磁盘使用量，检查文件系统的磁盘空间占用情况</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-h</td><td>以人们较易阅读的GBytes, MBytes, KBytes 等格式自行显示</td></tr></tbody></table><h3 id="lsblk-查看设备挂载情况">lsblk 查看设备挂载情况</h3><p><code>lsblk</code>全称为<code>list block</code></p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsblk# 查看设备挂载情况</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-f</td><td>查看详细的设备挂载情况，显示文件系统信息</td></tr></tbody></table><h3 id="fdisk-分区">fdisk 分区</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l# 查看磁盘分区详情</span><br><span class="line">fdisk 硬盘设备名# 对新增磁盘继续分区操作</span><br></pre></td></tr></table></figure><blockquote><p>注：该命令必须在root用户下才能使用</p></blockquote><h2 id="进程管理类">进程管理类</h2><h3 id="ps-查看当前系统进程状态">ps 查看当前系统进程状态</h3><p><code>ps</code>全称<code>process status</code> 进程状态</p><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux# 查看系统中所有进程</span><br><span class="line"></span><br><span class="line">ps -ef# 查看系统中所有进程，还能显示父进程的PID</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>a</td><td>列出带有终端的所有用户的进程</td></tr><tr><td>x</td><td>列出当前用户的所有进程，包括没有终端的进程</td></tr><tr><td>u</td><td>面向用户友好的显示风格</td></tr><tr><td>-e</td><td>列出所有进程</td></tr><tr><td>-u</td><td>列出某个用户关联的所有进程</td></tr><tr><td>-f</td><td>显示完整格式的进程列表</td></tr></tbody></table><ol start="3"><li>功能说明</li></ol><p>（1）<code>ps aux</code> 显示信息说明</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912344.png" alt="image-20230313104047564"></p><ul><li><p><code>USER</code>：该进程是由哪个用户产生的</p></li><li><p><code>PID</code>：进程的ID号</p></li><li><p><code>%CPU</code>：该进程占用CPU资源的百分比</p></li><li><p><code>%MEM</code>：该进程占用物理内存的百分比</p></li><li><p><code>VSZ</code>：该进程占用的虚拟内存的大小，单位KB</p></li><li><p><code>RSS</code>：该进程占用的实际物理内存的大小，单位KB</p></li><li><p><code>TTY</code>：该进程是在哪个终端中运行的。对于centos来说，tty1是图形化终端，tty2-tty6是本地的字符界面终端，pts/0-255代表虚拟终端</p></li><li><p><code>STAT</code>：进程状态。常见的状态有：<code>D</code>不可中断；<code>R</code>运行状态；<code>S</code>睡眠状态；<code>T</code>暂停状态；<code>Z</code>僵尸状态；<code>s</code>包含子进程；<code>l</code>多线程；<code>+</code>前台显示；<code>&lt;</code>高优先级；<code>N</code>低优先级</p></li><li><p><code>START</code>：该进程的启动时间</p></li><li><p><code>TIME</code>：该进程占用CPU的运算时间，注意不是系统时间</p></li><li><p><code>COMMAND</code>：产生此进程的命令名</p></li></ul><p>（2）<code>ps -ef</code> 显示信息说明</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912345.png" alt="image-20230313105517747"></p><ul><li><p><code>PPID</code>：父进程ID</p></li><li><p><code>C</code>：CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高</p></li><li><p><code>CMD</code>：启动进程所用的命令和参数</p></li></ul><h3 id="kill-终止进程">kill 终止进程</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill [选项] 进程号# 通过进程号杀死进程</span><br><span class="line">killall 进程名称 # 通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-9</td><td>表示强迫进程立即停止</td></tr></tbody></table><h3 id="pstree-查看进程树">pstree 查看进程树</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pstree [选项]</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>显示进程的PID</td></tr><tr><td>-u</td><td>显示进程的所属用户</td></tr></tbody></table><h3 id="top-实时监控系统进程状态">top 实时监控系统进程状态</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top [选项]</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-d n</td><td>n为数字；指定top命令每隔n秒更新。默认是3秒</td></tr><tr><td>-i</td><td>使top不显示任何闲置或者僵死进程</td></tr><tr><td>-p</td><td>通过指定监控进程ID来仅仅监控某个进程的状态</td></tr></tbody></table><ol start="3"><li>操作说明</li></ol><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>P</td><td>以CPU 使用率排序，默认就是此项</td></tr><tr><td>M</td><td>以内存的使用率排序</td></tr><tr><td>N</td><td>以PID 排序</td></tr><tr><td>q</td><td>退出top</td></tr></tbody></table><ol start="4"><li>查询结果字段解释</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912346.png" alt="image-20230313204616770"></p><table><thead><tr><th>第一行内容（任务队列信息）</th><th>说明</th></tr></thead><tbody><tr><td>20:46:30</td><td>系统当前时间</td></tr><tr><td>up 1 day, 14:27</td><td>系统已运行时间；本结果表示本机已运行1天14小时27分钟</td></tr><tr><td>1 user</td><td>当前登录了一个用户</td></tr><tr><td>load average: 0.04, 0.03, 0.05</td><td>系统在之前1 分钟，5 分钟，15 分钟的平均负载。一般认为小于1 时，负载较小。如果大于1，系统已经超出负荷。</td></tr></tbody></table><table><thead><tr><th>第二行内容（进程信息）</th><th>说明</th></tr></thead><tbody><tr><td>Tasks: 139 total</td><td>系统中的进程总数</td></tr><tr><td>1 running</td><td>正在运行的进程数</td></tr><tr><td>138 sleeping</td><td>睡眠的进程</td></tr><tr><td>0 stopped</td><td>正在停止的进程</td></tr><tr><td>0 zombie</td><td>僵尸进程。如果不是0，需要手工检查僵尸进程</td></tr></tbody></table><table><thead><tr><th>第三行内容（CPU信息）</th><th>说明</th></tr></thead><tbody><tr><td>%Cpu(s):  0.0 us</td><td>用户模式占用的CPU百分比</td></tr><tr><td>0.2 sy</td><td>系统模式占用的CPU百分比</td></tr><tr><td>0.0 ni</td><td>改变过优先级的用户进程占用的CPU 百分比</td></tr><tr><td>99.8 id</td><td>空闲CPU 的CPU 百分比</td></tr><tr><td>0.0 wa</td><td>等待输入/输出的进程的占用CPU 百分比</td></tr><tr><td>0.0 hi</td><td>硬中断请求服务占用的CPU 百分比</td></tr><tr><td>0.0 si</td><td>软中断请求服务占用的CPU 百分比</td></tr><tr><td>0.0 st</td><td>st（Steal time）虚拟时间百分比。就是当有虚拟机时，虚拟CPU 等待实际CPU 的时间百分比。</td></tr></tbody></table><table><thead><tr><th>第四行内容（物理内存信息）</th><th>说明</th></tr></thead><tbody><tr><td>KiB Mem :  3861300 total</td><td>物理内存的总量，单位KB</td></tr><tr><td>2705072 free</td><td>空闲的物理内存数量</td></tr><tr><td>441528 used</td><td>已经使用的物理内存数量</td></tr><tr><td>714700 buff/cache</td><td>作为缓冲的内存数量</td></tr></tbody></table><table><thead><tr><th>第五行内容（交换分区swap信息）</th><th>说明</th></tr></thead><tbody><tr><td>KiB Swap:  4063228 total</td><td>交换分区（虚拟内存）的总大小</td></tr><tr><td>4063228 free</td><td>空闲交换分区的大小</td></tr><tr><td>0 used</td><td>已经使用的交互分区的大小</td></tr><tr><td>3120088 avail Mem</td><td>作为缓存的交互分区的大小</td></tr></tbody></table><h3 id="netstat-显示网络状态和端口占用信息">netstat 显示网络状态和端口占用信息</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 进程号# 查看该进程网络信息</span><br><span class="line"></span><br><span class="line">netstat -nlp | grep 端口号# 查看网络端口号占用情况</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>显示所有正在监听（listen）和未监听的套接字（socket）</td></tr><tr><td>-n</td><td>拒绝显示别名，能显示数字的全部转化成数字</td></tr><tr><td>-l</td><td>仅列出在监听的服务状态</td></tr><tr><td>-p</td><td>表示显示哪个进程在调用</td></tr></tbody></table><h3 id="crontab-系统定时任务">crontab 系统定时任务</h3><h4 id="crontab-服务管理">crontab 服务管理</h4><ol><li>重新启动<code>crond</code>服务</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><h4 id="crontab-定时任务设置">crontab 定时任务设置</h4><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab [选项]</span><br></pre></td></tr></table></figure><ol start="2"><li>选项说明</li></ol><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>编辑crontab定时任务</td></tr><tr><td>-l</td><td>查询crontab任务</td></tr><tr><td>-r</td><td>删除当前用户所有的crontab任务</td></tr></tbody></table><ol start="3"><li>参数说明</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e# 会创建一个crontab定时任务，并使用vim编辑</span><br></pre></td></tr></table></figure><p>在vim中可以写入如下内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* * * * * 执行的任务</span><br></pre></td></tr></table></figure><blockquote><p>注：这个其实和Spring的定时任务差不多</p></blockquote><p><code>*</code>的含义如下：</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912347.png" alt="image-20230315203947263"></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912348.png" alt="image-20230315204021560"></p><p><strong>例子：</strong></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912349.png" alt="image-20230315204052144"></p><ol start="4"><li>案例</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/1 * * * * echo &quot;hello, world&quot; &gt;&gt; /root/hello.txt</span><br></pre></td></tr></table></figure><p>如，上面命令的意思是：每隔1分钟，将&quot;hello, world&quot; 追加到 /root/hello.txt 文件中。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303160912350.png" alt="image-20230315204519279"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础（一）</title>
      <link href="/2023/03/07/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/03/07/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>本文使用的是CentOS7.9，使用VMware安装虚拟机。</p><p>如何安装虚拟机可以在网上搜教程，就不再讲解了。</p><h2 id="Linux文件与目录结构">Linux文件与目录结构</h2><p><strong>Linux系统中一切皆是文件</strong></p><p>Linux目录结构如下，都是树形结构。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935513.png" alt=""></p><blockquote><p>有几个特性：</p><ul><li>文件名大小写敏感。如：MAIL，Mail，mail可以是同级目录下的不同文件</li><li>以<code>.</code>开头的文件为隐藏文件</li><li>路径的分割符为<code>/</code>。（与Windows下不同，Windows的分割符是<code>\</code>）</li><li>文件名最长255个字节</li><li>包括路径在内的文件名称最长4095字节</li></ul></blockquote><p><strong>目录作用说明：</strong></p><ul><li><code>/</code>：根目录</li><li><code>/bin</code>：是Binary的缩写，该目录存放着普通用户使用的命令</li><li><code>/sbin</code>：管理员使用的命令</li><li><code>/home</code>：存放普通用户的主目录。在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li><code>/root</code>：管理员的用户主目录</li><li><code>/lib</code>：系统开机所需要的最基本的动态链接共享库</li><li><code>/lost+found</code>：一般为空。当系统非法关机后，这里才存放一些文件</li><li><code>/etc</code>：所有的系统管理所需要的配置文件和子目录</li><li><code>/usr</code>：非常重要的系统文件。类似于windows下的program files目录</li><li><code>/boot</code>：这里存放的是启动Linux时使用的一些核心文件。</li><li><code>/proc</code>：这个目录是一个虚拟的目录，它是系统内存的映射。可以通过直接访问这个目录来获取系统信息。</li><li><code>/srv</code>：service缩写。该目录存放一些服务启动之后需要提取的数据</li><li><code>sys</code>：这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</li><li><code>/tmp</code>：用于存放一些临时文件</li><li><code>/dev</code>：是设备（device）的缩写。用于存放Linux的外部设备。把所有的硬件用文件的形式存储。</li><li><code>/media</code>（CentOS6）：linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。CentOS7迁移到<code>/run/media</code></li><li><code>/mnt</code>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 /mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</li><li><code>/opt</code>：opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li><code>var</code>：var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li></ul><h2 id="vi-vim编辑器">vi/vim编辑器</h2><h3 id="基本概念">基本概念</h3><ul><li><p><code>vi</code>是Unix操作系统和类Unix操作系统中最通用的文本编辑器</p></li><li><p><code>vim</code>编辑器是从VI发展出来的一个性能更加强大的文本编辑器。可以主动的以字体颜色辨别语法的正确性，方便程序设计。<code>vim</code>与<code>vi</code>编辑器完全兼容</p></li></ul><p><code>vi</code>/<code>vim</code>常用的三种模式分别是：<strong>一般模式</strong>，<strong>编辑模式</strong>，<strong>命令模式</strong></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935514.png" alt=""></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935516.gif" alt=""></p><h3 id="一般模式（默认）">一般模式（默认）</h3><p>刚启动<code>vim</code>就会进入一般模式。此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。可以【删除】、【复制】、【粘贴】</p><p>其中常用语法如下：</p><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>yy</td><td>复制光标当前一行**（常用）**</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在（含）的向下 n 行，例如 20yy 则是复制 20 行**（常用）**</td></tr><tr><td>p, P</td><td>p为将已复制的数据在光标下一行贴上；P 则为贴在游标上一行；<strong>（常用）</strong></td></tr><tr><td>np</td><td>n 为数字。将复制的内容粘贴n次</td></tr><tr><td>u</td><td>撤销上一步</td></tr><tr><td>dd</td><td>剪切游标所在的那一整行**(常用)**</td></tr><tr><td>ndd</td><td>n 为数字。剪切光标（含）后n行</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>yw</td><td>复制当前光标所在的那个字符到单词结束的所有数据</td></tr><tr><td>dw</td><td>剪切当前光标所在的那个字符到单词结束的所有数据</td></tr><tr><td>$</td><td>将光标移动到当前行的行尾</td></tr><tr><td>^</td><td>将光标移动到当前行的行头</td></tr><tr><td>G</td><td>移动到最后一行</td></tr><tr><td>nG</td><td>移动到这个文件的第n行**(常用)**(可配合 :set nu)</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="编辑模式">编辑模式</h3><p>在一般模式下，按下【i, I, o, O, a, A】等任何一个字母，才会进入编辑模式</p><p>若要从编辑模式切换回一般模式，则按【Esc】按键即可</p><p>常用语法</p><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>i</td><td>当前光标前</td></tr><tr><td>a</td><td>当前光标后</td></tr><tr><td>o</td><td>当前光标行的下一行</td></tr><tr><td>I</td><td>当前光标所在行的行头</td></tr><tr><td>A</td><td>当前光标所在行的行尾</td></tr><tr><td>O</td><td>当前光标行的上一行</td></tr></tbody></table><blockquote><p>建议：</p><p>命令太多了，建议只使用一个【i】就够用了</p></blockquote><h3 id="指令模式">指令模式</h3><p>在一般模式中，输入【<code>:</code>，<code>/</code>，<code>?</code>】任何一个按钮，就可以将光标移动到最底下的那行，进入指令模式。</p><p>常用语法</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:!</td><td>强制执行</td></tr><tr><td>/要查找的词</td><td>n查找下一个，N往上查找</td></tr><tr><td>?要查找的词</td><td>往上查找</td></tr><tr><td>:noh</td><td>取消高亮显示</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>关闭行号</td></tr><tr><td>:%s/old/new/g</td><td>替换内容 /g 替换匹配到的所有内容</td></tr><tr><td>:%s/word1/word2/gc</td><td>寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：<br/>『:100,200s/vbird/VBIRD/g』。(常用)</td></tr></tbody></table><h2 id="网络配置">网络配置</h2><h3 id="查看网络IP和网关">查看网络IP和网关</h3><ol><li>查看IP地址</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935517.png" alt=""></p><ol start="2"><li>查看网关地址</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip route</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935518.png" alt=""></p><h3 id="配置网络IP地址">配置网络IP地址</h3><h4 id="修改IP地址成静态地址">修改IP地址成静态地址</h4><ol><li>查看IP配置文件</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935519.png" alt=""></p><ol start="2"><li>将其修改为静态IP地址</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935520.png" alt=""></p><p>上述修改的DNS2，应该为DNS1</p><h4 id="重启网络">重启网络</h4><p>在修改IP地址后，需要重启网络：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><h4 id="修改IP地址后可能会遇到的问题">修改IP地址后可能会遇到的问题</h4><ul><li><p>物理机能ping通虚拟机，但是虚拟机ping不通物理机。一般都是因为物理机的防火墙问题，把防火墙关闭就行。</p></li><li><p>虚拟机能ping通物理机，但是虚拟机ping不通外网。一般都是DNS设置有问题</p></li><li><p>虚拟机ping <code>www.baidu.com</code> 显示域名未知等信息，一般查看GATEWAY和DNS设置是否正确</p></li><li><p>如果以上全部设置完还是不行，需要关闭<code>NetworkManager</code>服务</p></li></ul> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager # 关闭</span><br><span class="line">systemctl disable NetworkManager # 禁用</span><br></pre></td></tr></table></figure><ul><li>如果检查发现<code>systemctl status network</code> 有问题，需要检查 ifcfg-ens33</li></ul><h3 id="配置主机名">配置主机名</h3><h4 id="修改主机名称">修改主机名称</h4><ol><li>查看当前服务器的主机名称</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935521.png" alt=""></p><ol start="2"><li>如果感觉主机名不合适，可以修改。通过编辑<code>/etc/hostname</code>文件</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><ol start="3"><li>修改后，重启生效</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><ol start="4"><li>如果不想重启，则执行以下命令</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname [新主机名]</span><br></pre></td></tr></table></figure><h4 id="修改hosts映射文件">修改hosts映射文件</h4><p>1）修改<code>Linux</code>的主机映射文件（hosts文件）</p><p>（1）打开<code>/etc/hosts</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>（2）添加如下内容</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303111935522.png" alt=""></p><ol start="2"><li>重启设备</li></ol><h2 id="系统管理">系统管理</h2><h3 id="Linux中的进程和服务">Linux中的进程和服务</h3><ul><li><p>计算机中，一个正在执行的程序或命令，被叫做“进程”（process）</p></li><li><p>启动之后一直存在、常驻内存的进程，一般被称作“服务”（service）</p></li></ul><h3 id="service服务管理（centos6）">service服务管理（centos6）</h3><ol><li>对某个服务进行 启动/停止/重启/查看状态</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service 服务名 start|stop|restart|status</span><br></pre></td></tr></table></figure><ol start="2"><li>查看Linux所有服务的运行状态</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service --status-all</span><br></pre></td></tr></table></figure><ol start="3"><li>列出所有服务</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure><ol start="4"><li>查看所有服务</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/init.d</span><br><span class="line">ls -al</span><br></pre></td></tr></table></figure><h3 id="chkconfig-设置后台服务的自启配置（centos6）">chkconfig 设置后台服务的自启配置（centos6）</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig # 查看所有服务的自启配置</span><br><span class="line">chkconfig 服务名 off# 关掉指定服务的自动启动</span><br><span class="line">chkconfig 服务名 on# 开启指定服务的自动启动</span><br><span class="line">chkconfig 服务名 --list# 查看服务开机启动状态</span><br></pre></td></tr></table></figure><h3 id="systemctl-centos7的服务管理">systemctl (centos7的服务管理)</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start|stop|restart|status 服务名</span><br></pre></td></tr></table></figure><ol start="2"><li>查看服务的方法：</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/systemd/system</span><br><span class="line">ls -al</span><br></pre></td></tr></table></figure><h3 id="systemctl-设置后台服务的自启配置（centos7）">systemctl 设置后台服务的自启配置（centos7）</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files# 查看服务开机启动状态</span><br><span class="line">systemctl disable 服务名# 关掉指定服务的自启动</span><br><span class="line">systemctl enable 服务名# 开启指定服务的自启动</span><br></pre></td></tr></table></figure><h3 id="关机重启命令">关机重启命令</h3><ol><li>基本语法</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync# 将数据由内存同步到硬盘中</span><br><span class="line">halt# 停机，关闭系统，但不断电</span><br><span class="line">poweroff# 关机，断电</span><br><span class="line">reboot# 重启，等同于 shutdown -r now</span><br><span class="line">shutdown</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客教程(三)图片存储</title>
      <link href="/2023/03/06/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-%E4%B8%89-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/"/>
      <url>/2023/03/06/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B-%E4%B8%89-%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在Hexo博客远程发布时，如何存储并显示文章中的图片是一个问题。本文使用GitHub+PicGo来存储并显示图片，并使用Typora来写博客。</p><h2 id="环境安装">环境安装</h2><h3 id="安装Git">安装Git</h3><p>安装Git后还需要绑定自己的GitHub账号，可参考<a href="https://hugh-98.github.io/2023/03/05/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E4%B8%80/">这篇博客</a></p><h3 id="安装PicGo">安装PicGo</h3><p>GitHub地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><p>安装较为简单，直接略过了</p><h3 id="安装Typora">安装Typora</h3><p><a href="https://typoraio.cn/">官网</a>现在的版本需要购买。也可以在网上找0.x的版本，免费。</p><h2 id="GitHub图床部署">GitHub图床部署</h2><h3 id="GitHub新建仓库">GitHub新建仓库</h3><p>在GitHub上新建一个仓库，自定义名字</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950057.png" alt="image-20230306193643724"></p><h3 id="GitHub创建token">GitHub创建token</h3><ol><li>在GitHub的setting中，找到<code>Developer settings</code>选项</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950058.png" alt="image-20230306193923052"></p><ol start="2"><li>创建一个新的token</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950059.png" alt="image-20230306194020418"></p><ol start="3"><li>创建时候的选项</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950060.png" alt="image-20230306194133670"></p><ol start="4"><li>生成后，复制该token</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950061.png" alt="image-20230306194246910"></p><h3 id="PicGo设置">PicGo设置</h3><ol><li>打开安装的PicGo软件</li><li>在图床设置中，按照要求填写仓库名、分支名、token等等，即可。</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950062.png" alt="image-20230306194404448"></p><h3 id="Typora设置">Typora设置</h3><p>Typora推荐用来写博客，使用Markdown非常方便。</p><p>为了能够在Typora中使用PicGo上传图片到GitHub上，可以对Typora进行设置。</p><ol><li>主要在偏好设置中设置图像。并可以验证图片是否可以正常上传</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950063.png" alt="image-20230306194633693"></p><ol start="2"><li>在Typora中写博客时插入图片后，可以一键上传博客中所有图片</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061950064.png" alt="image-20230306194836662"></p><h2 id="目前存在的问题">目前存在的问题</h2><p>目前，使用GitHub作为图床，由于在中国大陆访问GitHub比较艰难，因此会出现图片显示不了的问题，需要科学上网后才会显示图片。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客教程(二)Hexo主题推荐</title>
      <link href="/2023/03/06/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E4%BA%8C/"/>
      <url>/2023/03/06/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Hexo博客默认的页面感觉太单调了，为了更好地美化个人博客，我们可以自己选择喜欢的主题。</p><p>Hexo推荐的主题有很多，都可以在<a href="https://hexo.io/themes/">官方网站</a>上查看。</p><p>本文主要讲一下推荐的主题，以及目前本人正在使用的主题。</p><h2 id="推荐主题">推荐主题</h2><h3 id="Butterfly">Butterfly</h3><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608546.png" alt="image-20230306102321551"  /><p>官网：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>GitHub地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><h3 id="NexT">NexT</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608547.png" alt="image-20230306102721008"></p><p>官网：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a></p><p>GitHub地址：<a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></p><h3 id="Icarus">Icarus</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608548.png" alt="image-20230306103633570"></p><p>官网：<a href="https://ppoffice.github.io/hexo-theme-icarus/">https://ppoffice.github.io/hexo-theme-icarus/</a></p><p>GitHub地址：<a href="https://github.com/ppoffice/hexo-theme-icarus">https://github.com/ppoffice/hexo-theme-icarus</a></p><h3 id="Fluid">Fluid</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608549.png" alt="image-20230306104439103"></p><p>官网：<a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></p><p>GitHub地址：<a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><h3 id="Volantis">Volantis</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608550.png" alt="image-20230306104813452"></p><p>官网：<a href="https://volantis.js.org/">https://volantis.js.org/</a></p><p>GitHub地址：<a href="https://github.com/volantis-x/hexo-theme-volantis">https://github.com/volantis-x/hexo-theme-volantis</a></p><h3 id="Snippet">Snippet</h3><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303061608551.png" alt="image-20230306105139544"></p><p>官网：<a href="https://www.91h5.cc/?rf=gh-demo">https://www.91h5.cc/?rf=gh-demo</a></p><p>GitHub地址：<a href="https://github.com/shenliyang/hexo-theme-snippet">https://github.com/shenliyang/hexo-theme-snippet</a></p><h2 id="本文使用的主题Butterfly介绍">本文使用的主题Butterfly介绍</h2><p>本博客使用主题：<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a></p><p>关于如何配置可以直接看官网即可，讲的非常详细了。</p><blockquote><p>注意：使用该主题后，以后若需改动配置，则只需要在<code>_config.butterfly.yml</code>进行配置，可以不用在<code> _config.yml</code>中配置。</p></blockquote><p>在butterfly中，本文已配置如下第三方的功能：</p><ul><li><a href="https://github.com/PaicHyperionDev/hexo-generator-search">本地搜索</a></li><li><a href="https://tongji.baidu.com/web/welcome/login">百度分析统计</a></li><li>KaTeX</li><li>字数统计</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客教程(一)搭建Hexo博客</title>
      <link href="/2023/03/05/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E4%B8%80/"/>
      <url>/2023/03/05/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>首先，本文目标是搭建一个完全免费的个人博客。</p><p>当然，免费也有一定的缺点，就是GitHub经常需要科学上网才能进入，不太方便。也有人用Gitee，没有科学上网的人也可以搜索网上的相关教程。</p><p><strong>本文主要使用框架：</strong></p><ul><li>Hexo</li><li>Github</li></ul><p>笔者使用的是Windows10系统，所以只讲该系统下的安装与使用。并且，本文在安装软件时直接使用科学上网下载安装，对于无法科学上网的人来说可能会存在一些问题，建议查看<a href="https://hexo.io/zh-cn/docs/index.html">Hexo官方文档</a></p><p>也可以参考这位<a href="https://www.bilibili.com/video/BV1Yb411a7ty">up主的视频</a></p><h2 id="环境安装">环境安装</h2><p>这一步其实也可以参考<a href="https://hexo.io/zh-cn/docs/index.html">Hexo官方文档</a></p><h3 id="安装Git">安装Git</h3><h4 id="去官网安装Git">去官网安装<a href="https://git-scm.com/download/win">Git</a></h4><p>一般现在都是64位的Windows系统，所以直接下载安装即可。（不会就搜教程）</p><h4 id="让Git与自己的GitHub账号绑定">让Git与自己的GitHub账号绑定</h4><ol><li>安装完成后即可在右击鼠标，打开Git Bash。或者在Windows的搜索框中搜索Git，即可看到</li></ol><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208949.png" alt="image-20230305204033056" style="zoom: 80%;" /><ol start="2"><li>设置用户名与邮箱</li></ol><p>在Git Bash中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>生成ssh密钥文件</li></ol><p>在Git Bash中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>输入上述命令后，会有几个需要确认的问题，直接三个回车键即可。</p><ol start="4"><li>找到生成的密钥文件</li></ol><p>可以在Git Bash中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh# 进入密钥文件所在文件夹</span><br><span class="line">cat id_rsa.pub# 打印出公钥，将打印出的内容全部复制</span><br></pre></td></tr></table></figure><ol start="5"><li>登录GitHub账号，在GitHub Setting中添加SSH Keys</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208951.png" alt="image-20230305205503008"></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208952.png" alt="image-20230305205606025"></p><ol start="6"><li>测试是否绑定账号成功</li></ol><p>在Git Bash中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现以下信息，即表示成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Hi xxx! You&#x27;ve successfully authenticated, xxx.</span><br></pre></td></tr></table></figure><h3 id="安装Node-js">安装Node.js</h3><p>Hexo基于Node.js，所以需要安装Node.js</p><p>在<a href="https://nodejs.org/zh-cn/download/">Node.js官网</a>上下载Node.js即可</p><p>下载并安装完成后，可以在命令行中输入以下命令检测是否安装成功：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>如果成功，则会显示Node.js的版本号</p><p>后面还需要使用npm，但是由于Node.js已经自带npm，所以不需要额外安装。可以使用以下命令检测电脑中是否有npm：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="安装Hexo">安装Hexo</h3><ol><li>在电脑中创建一个文件夹。Hexo框架以及以后发布的博客都存储在该文件夹中。</li><li>在该文件夹中，打开命令行，使用npm安装Hexo</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><ol start="3"><li>初始化博客。同目录下，输入：</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><hr/><p>通过以上命令即可将Hexo安装在本地。</p><p>下面就可以使用Hexo了。</p><h2 id="Hexo本地使用">Hexo本地使用</h2><h3 id="常用命令">常用命令</h3><p><strong>注：以下命令均在Hexo的安装目录下执行</strong></p><h3 id="创建博客">创建博客</h3><p>输入以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;博客名&quot;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><ol><li><p>创建的博客在Hexo安装路径下的<code>./source/_posts/</code>文件夹下。</p><p>也可以自己手动在该路径下创建文章，但是手动创建的文章不会自动加前言。</p><p><strong>所以，还是推荐使用命令创建新的博客</strong></p></li><li><p>生成的博客名后面默认有<code>.md</code>的后缀，所以最好学会写markdown形式的博客。（推荐使用<code>Typora</code>书写）</p></li></ol></blockquote><h3 id="生成静态文件">生成静态文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="本地部署Hexo">本地部署Hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="本地部署流程">本地部署流程</h3><p>如果我们只是想将博客部署在本地电脑，则根据上述的命令，按照以下流程完成即可：</p><ol><li>创建博客</li><li>生成静态文件</li><li>本地部署Hexo</li></ol><p>部署后，最后在 <a href="http://localhost:4000">http://localhost:4000</a> 即可访问</p><h2 id="Hexo部署在GitHub">Hexo部署在GitHub</h2><p>如果要将Hexo部署在Github上，则还需接下来的操作。</p><h3 id="GitHub新建仓库">GitHub新建仓库</h3><ol><li>在GitHub上新建一个仓库</li></ol><p><strong>注意：这里仓库名一定要是<code>用户名.github.io</code></strong></p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208953.png" alt="image-20230305213100961"></p><ol start="2"><li>创建成功后，将仓库的ssh链接复制下来</li></ol><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208954.png" alt="image-20230305213618837"></p><h3 id="修改配置文件">修改配置文件</h3><p>Hexo的配置内容都在安装路径下的<code>_config.yml</code>文件</p><p>在配置文件中，找到<code>deploy</code>的相关内容，将<code>type</code>填入<code>git</code>，<code>repo</code>填入上述复制的ssh链接，<code>branch</code>填入仓库对应的分支名。（注：现在默认分支应该是main吧，最好看清楚自己仓库的分支）</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052208955.png" alt="image-20230305213657883"></p><h3 id="远程部署">远程部署</h3><p>上述步骤都完成后，可以使用以下命令进行远程部署：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>在部署前，如果有改动，则需要先用以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>然后，再使用远程部署的命令</p></blockquote><p>以后每次写出新文章就需要远程部署一次。</p><blockquote><p>建议每次远程部署前，先在本地部署预览一下，查看是否有问题，没问题在发布到GitHub上。</p></blockquote><h2 id="出现过的问题">出现过的问题</h2><h3 id="ssh端口不管用">ssh端口不管用</h3><p>在远程部署的时候，我使用的是github仓库链接是ssh的，所以需要22端口。有一次部署我发现，出现以下错误。从中可以看出，是因为无法读取远程仓库导致的。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052226746.png" alt="image-20230305222433073"></p><p>排查问题的方法很简单，在Git Bash中使用以下命令，检测是否可以链接github</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>我当时就出现如下报错。所以可以肯定，是22端口无法使用导致的。</p><p><img src="https://raw.githubusercontent.com/hugh-98/PicGo/main/img/202303052226321.png" alt="image-20230305222554789"></p><p>究其原因，我发现是学校校园网将22端口屏蔽了，所以无法使用。只要换个网络即可。</p><h3 id="图片无法显示">图片无法显示</h3><p>目前依旧存在的问题：</p><p>由于我博客中主题的图片与文章中的图片都存在Github上，导致如果不使用科学上网，图片将无法显示。。。</p><p>难道这就是免费的缺点吗！呜呜呜呜</p><p>不知道怎么解决！！！求评论区大佬教教</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
